<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="FSharp.Core" version="2.3.98.1">
    <attributes>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp.Core" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp.Collections" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp.Control" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp.Linq.QueryRunExtensions.LowPriority" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute">
        <properties>
          <property name="Path" value="Microsoft.FSharp.Linq.QueryRunExtensions.HighPriority" />
        </properties>
      </attribute>
      <attribute name="Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute">
        <properties>
          <property name="Major" value="2" />
          <property name="Minor" value="0" />
          <property name="Release" value="0" />
        </properties>
      </attribute>
      <attribute name="System.CLSCompliantAttribute">
        <properties>
          <property name="IsCompliant" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Diagnostics.DebuggableAttribute">
        <properties>
          <property name="IsJITTrackingEnabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="IsJITOptimizerDisabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="DebuggingFlags" value="IgnoreSymbolStoreSequencePoints" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCopyrightAttribute">
        <properties>
          <property name="Copyright" value="Â© Microsoft Corporation and other contributors.  Apache 2.0 License." />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDescriptionAttribute">
        <properties>
          <property name="Description" value="FSharp.Core.dll" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyProductAttribute">
        <properties>
          <property name="Product" value="F# (open source edition)" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyTitleAttribute">
        <properties>
          <property name="Title" value="FSharp.Core.dll" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.DefaultDependencyAttribute">
        <properties>
          <property name="LoadHint" value="Always" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.DependencyAttribute">
        <properties>
          <property name="DependentAssembly" value="FSharp.Core" />
          <property name="LoadHint" value="Always" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
        <properties>
          <property name="Value" value="False" />
        </properties>
      </attribute>
    </attributes>
    <namespaces>
      <namespace name="Microsoft.FSharp.Collections">
        <classes>
          <class name="Array2DModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Base1(T[0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="base1" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Base2(T[0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="base2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Copy(T[0...,0...])" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="copy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CopyTo(T[0...,0...], System.Int32, System.Int32, T[0...,0...], System.Int32, System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="blit" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="T[0...,0...]" />
                  <parameter name="sourceIndex1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="sourceIndex2" position="2" attrib="0" type="System.Int32" />
                  <parameter name="target" position="3" attrib="0" type="T[0...,0...]" />
                  <parameter name="targetIndex1" position="4" attrib="0" type="System.Int32" />
                  <parameter name="targetIndex2" position="5" attrib="0" type="System.Int32" />
                  <parameter name="length1" position="6" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="7" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Create(System.Int32, System.Int32, T)" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="create" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="value" position="2" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CreateBased(System.Int32, System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="createBased" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="base1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="base2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length1" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="3" attrib="0" type="System.Int32" />
                  <parameter name="initial" position="4" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Get(T[0...,0...], System.Int32, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="get" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                  <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Initialize(System.Int32, System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]])" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InitializeBased(System.Int32, System.Int32, System.Int32, System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]])" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="initBased" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="base1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="base2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length1" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="3" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], T[0...,0...])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]], T[0...,0...])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length1(T[0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length1" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length2(T[0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[0...,0...])" attrib="22" static="true" returntype="TResult[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]], T[0...,0...])" attrib="22" static="true" returntype="TResult[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Rebase(T[0...,0...])" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="rebase" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Set(T[0...,0...], System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="set" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...]" />
                  <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                  <parameter name="value" position="3" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ZeroCreate(System.Int32, System.Int32)" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zeroCreate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ZeroCreateBased(System.Int32, System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zeroCreateBased" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="base1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="base2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length1" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="3" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="Array3DModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Create(System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="T[0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="create" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length3" position="2" attrib="0" type="System.Int32" />
                  <parameter name="initial" position="3" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Get(T[0...,0...,0...], System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="get" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...]" />
                  <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                  <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Initialize(System.Int32, System.Int32, System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]]])" attrib="22" static="true" returntype="T[0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length3" position="2" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], T[0...,0...,0...])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]]], T[0...,0...,0...])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]]]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length1(T[0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length1" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length2(T[0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length3(T[0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[0...,0...,0...])" attrib="22" static="true" returntype="TResult[0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]]], T[0...,0...,0...])" attrib="22" static="true" returntype="TResult[0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]]]" />
                  <parameter name="array" position="1" attrib="0" type="T[0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Set(T[0...,0...,0...], System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="set" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...]" />
                  <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                  <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                  <parameter name="value" position="4" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ZeroCreate(System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T[0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zeroCreate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length3" position="2" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="Array4DModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Create(System.Int32, System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="T[0...,0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="create" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length3" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length4" position="3" attrib="0" type="System.Int32" />
                  <parameter name="initial" position="4" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Get(T[0...,0...,0...,0...], System.Int32, System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="get" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                  <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                  <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                  <parameter name="index4" position="4" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Initialize(System.Int32, System.Int32, System.Int32, System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]]]])" attrib="22" static="true" returntype="T[0...,0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length3" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length4" position="3" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length1(T[0...,0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length1" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length2(T[0...,0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length3(T[0...,0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length4(T[0...,0...,0...,0...])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length4" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Set(T[0...,0...,0...,0...], System.Int32, System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="set" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                  <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                  <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                  <parameter name="index4" position="4" attrib="0" type="System.Int32" />
                  <parameter name="value" position="5" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ZeroCreate(System.Int32, System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T[0...,0...,0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zeroCreate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length1" position="0" attrib="0" type="System.Int32" />
                  <parameter name="length2" position="1" attrib="0" type="System.Int32" />
                  <parameter name="length3" position="2" attrib="0" type="System.Int32" />
                  <parameter name="length4" position="3" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ArrayModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Append(T[], T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="append" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array1" position="0" attrib="0" type="T[]" />
                  <parameter name="array2" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="average" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AverageBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="averageBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Choose(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], T[])" attrib="22" static="true" returntype="TResult[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="choose" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Collect(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult[]], T[])" attrib="22" static="true" returntype="TResult[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="collect" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult[]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Collections.Generic.IEnumerable`1[T[]])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="concat" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="arrays" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T[]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Copy(T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="copy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CopyTo(T[], System.Int32, T[], System.Int32, System.Int32)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="blit" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="T[]" />
                  <parameter name="sourceIndex" position="1" attrib="0" type="System.Int32" />
                  <parameter name="target" position="2" attrib="0" type="T[]" />
                  <parameter name="targetIndex" position="3" attrib="0" type="System.Int32" />
                  <parameter name="count" position="4" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Create(System.Int32, T)" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="create" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="empty" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.GeneralizableValueAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]], T1[], T2[])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fill(T[], System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fill" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="T[]" />
                  <parameter name="targetIndex" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="value" position="3" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Find(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="find" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FindIndex(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="findIndex" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, T[])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="array" position="2" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold2(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TState]]], TState, T1[], T2[])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TState]]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="array1" position="2" attrib="0" type="T1[]" />
                  <parameter name="array2" position="3" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]], T[], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]], T1[], T2[], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                  <parameter name="state" position="3" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]], T1[], T2[])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Get(T[], System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="get" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GetSubArray(T[], System.Int32, System.Int32)" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sub" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="startIndex" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Initialize(System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsEmpty(T[])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isEmpty" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], T[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]], T1[], T2[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]], T[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed2(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]], T1[], T2[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length(T[])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[])" attrib="22" static="true" returntype="TResult[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]], T1[], T2[])" attrib="22" static="true" returntype="TResult[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], T[])" attrib="22" static="true" returntype="TResult[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed2(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]], T1[], T2[])" attrib="22" static="true" returntype="TResult[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]]" />
                  <parameter name="array1" position="1" attrib="0" type="T1[]" />
                  <parameter name="array2" position="2" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="max" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MaxBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="maxBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="min" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MinBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="minBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfList(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfSeq(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="System.Tuple`2[T[],T[]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="partition" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Permute(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,System.Int32], T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="permute" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="indexMap" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,System.Int32]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Pick(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], T[])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reduce(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="reduce" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="reduction" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ReduceBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="reduceBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="reduction" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reverse(T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="rev" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Scan(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, T[])" attrib="22" static="true" returntype="TState[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="array" position="2" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ScanBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]], T[], TState)" attrib="22" static="true" returntype="TState[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scanBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Set(T[], System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="set" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="value" position="2" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sort(T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sort" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortInPlace(T[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortInPlace" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortInPlaceBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], T[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortInPlaceBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortInPlaceWith(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]], T[])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortInPlaceWith" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortWith(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]], T[])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortWith" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(T[])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sum" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SumBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sumBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(T[])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSeq(T[])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFind(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFind" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFindIndex(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFindIndex" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryPick(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], T[])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryPick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="array" position="1" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Unzip(System.Tuple`2[T1,T2][])" attrib="22" static="true" returntype="System.Tuple`2[T1[],T2[]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unzip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Tuple`2[T1,T2][]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Unzip3(System.Tuple`3[T1,T2,T3][])" attrib="22" static="true" returntype="System.Tuple`3[T1[],T2[],T3[]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unzip3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Tuple`3[T1,T2,T3][]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ZeroCreate(System.Int32)" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zeroCreate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(T1[], T2[])" attrib="22" static="true" returntype="System.Tuple`2[T1,T2][]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array1" position="0" attrib="0" type="T1[]" />
                  <parameter name="array2" position="1" attrib="0" type="T2[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip3(T1[], T2[], T3[])" attrib="22" static="true" returntype="System.Tuple`3[T1,T2,T3][]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zip3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array1" position="0" attrib="0" type="T1[]" />
                  <parameter name="array2" position="1" attrib="0" type="T2[]" />
                  <parameter name="array3" position="2" attrib="0" type="T3[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
            <classes>
              <class name="Parallel" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="Choose(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], T[])" attrib="22" static="true" returntype="TResult[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="choose" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                      <generic-parameter name="TResult" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Collect(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult[]], T[])" attrib="22" static="true" returntype="TResult[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="collect" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult[]]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                      <generic-parameter name="TResult" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Initialize(System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T])" attrib="22" static="true" returntype="T[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="init" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="count" position="0" attrib="0" type="System.Int32" />
                      <parameter name="initializer" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], T[])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="iter" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]], T[])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="iteri" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T[])" attrib="22" static="true" returntype="TResult[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="map" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                      <generic-parameter name="TResult" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], T[])" attrib="22" static="true" returntype="TResult[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="mapi" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                      <generic-parameter name="TResult" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], T[])" attrib="22" static="true" returntype="System.Tuple`2[T[],T[]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="partition" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                      <parameter name="array" position="1" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="ComparisonIdentity" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="FromFunction(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]])" attrib="22" static="true" returntype="System.Collections.Generic.IComparer`1[T]">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Structural()" attrib="22" static="true" returntype="System.Collections.Generic.IComparer`1[T]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpList`1" type="class" base="System.Object" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpList`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.DefaultAugmentationAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="{DebugDisplay,nq}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="Microsoft.FSharp.Collections.ListDebugView`1" />
                </properties>
              </attribute>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Collections.FSharpList`1[T]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Collections.FSharpList`1[T]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T, Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="6150">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="head" position="0" attrib="0" type="T" />
                  <parameter name="tail" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Empty" attrib="0" ptype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Empty()" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Head" attrib="0" ptype="T">
                <methods>
                  <method name="get_Head()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HeadOrDefault" attrib="0" ptype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                    <properties>
                      <property name="SourceConstructFlags" value="Field" />
                      <property name="SequenceNumber" value="0" />
                      <property name="VariantNumber" value="1" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_HeadOrDefault()" attrib="134" returntype="T">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsCons" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsCons()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsEmpty()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="T" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2182" returntype="T">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tail" attrib="0" ptype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <methods>
                  <method name="get_Tail()" attrib="2182" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TailOrNull" attrib="0" ptype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                    <properties>
                      <property name="SourceConstructFlags" value="Field" />
                      <property name="SequenceNumber" value="1" />
                      <property name="VariantNumber" value="1" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_TailOrNull()" attrib="134" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Cons(T, Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="head" position="0" attrib="0" type="T" />
                  <parameter name="tail" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="get_Empty()" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_HeadOrDefault()" attrib="134" returntype="T">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsCons()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsEmpty()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_TailOrNull()" attrib="134" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Cons" attrib="32854" fieldtype="System.Int32" value="1" />
                  <field name="Empty" attrib="32854" fieldtype="System.Int32" value="0" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpMap`2" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpMap`2" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="Microsoft.FSharp.Collections.MapDebugView`2" />
                </properties>
              </attribute>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.IComparable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TKey" attributes="0">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.EqualityConditionalOnAttribute" />
                </attributes>
              </generic-parameter>
              <generic-parameter name="TValue" attributes="0">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.ComparisonConditionalOnAttribute" />
                  <attribute name="Microsoft.FSharp.Core.EqualityConditionalOnAttribute" />
                </attributes>
              </generic-parameter>
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,TValue]])" attrib="6150">
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,TValue]]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_IsEmpty()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="TValue" params="TKey">
                <methods>
                  <method name="get_Item(TKey)" attrib="2182" returntype="TValue">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(TKey, TValue)" attrib="134" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,TValue]">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="value" position="1" attrib="0" type="TValue" />
                </parameters>
              </method>
              <method name="ContainsKey(TKey)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="that" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Remove(TKey)" attrib="134" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,TValue]">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="TryFind(TKey)" attrib="134" returntype="Microsoft.FSharp.Core.FSharpOption`1[TValue]">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpSet`1" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpSet`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="Microsoft.FSharp.Collections.SetDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.IComparable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.EqualityConditionalOnAttribute" />
                </attributes>
              </generic-parameter>
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6150">
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_IsEmpty()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MaximumElement" attrib="0" ptype="T">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_MaximumElement()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MinimumElement" attrib="0" ptype="T">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_MinimumElement()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(T)" attrib="134" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Contains(T)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="that" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="otherSet" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="otherSet" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
              </method>
              <method name="IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="otherSet" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
              </method>
              <method name="IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="otherSet" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
              </method>
              <method name="Remove(T)" attrib="134" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="op_Addition(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="2070" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
              </method>
              <method name="op_Subtraction(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="2070" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="HashIdentity" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="FromFunctions(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]])" attrib="22" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="hasher" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]" />
                  <parameter name="equality" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LimitedStructural(System.Int32)" attrib="22" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                <parameters>
                  <parameter name="limit" position="0" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reference()" attrib="22" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="Structural()" attrib="22" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ListModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Append(Microsoft.FSharp.Collections.FSharpList`1[T], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="append" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                  <parameter name="list2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="average" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AverageBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="averageBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Choose(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="choose" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Collect(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Collections.FSharpList`1[TResult]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="collect" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Collections.FSharpList`1[TResult]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Collections.FSharpList`1[T]])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="concat" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="lists" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Collections.FSharpList`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="empty" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.GeneralizableValueAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Find(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="find" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FindIndex(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="findIndex" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="list" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold2(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TState]]], TState, Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TState]]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="list1" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="3" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]], Microsoft.FSharp.Collections.FSharpList`1[T], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                  <parameter name="state" position="3" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Get(Microsoft.FSharp.Collections.FSharpList`1[T], System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="nth" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Head(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="head" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Initialize(System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="length" position="0" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsEmpty(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isEmpty" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed2(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map3(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2], Microsoft.FSharp.Collections.FSharpList`1[T3])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                  <parameter name="list3" position="3" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T3]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed2(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]], Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]]" />
                  <parameter name="list1" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="max" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MaxBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="maxBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="min" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MinBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="minBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfArray(T[])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfSeq(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Collections.FSharpList`1[T],Microsoft.FSharp.Collections.FSharpList`1[T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="partition" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Permute(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,System.Int32], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="permute" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="indexMap" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,System.Int32]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Pick(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reduce(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="reduce" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="reduction" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ReduceBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="reduceBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="reduction" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Replicate(System.Int32, T)" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="replicate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="initial" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reverse(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="rev" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Scan(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TState]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="list" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ScanBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]], Microsoft.FSharp.Collections.FSharpList`1[T], TState)" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[TState]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scanBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sort(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sort" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortWith(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortWith" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sum" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SumBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sumBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Tail(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tail" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSeq(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFind(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFind" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFindIndex(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFindIndex" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryPick(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryPick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="list" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Unzip(Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[T1,T2]])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Collections.FSharpList`1[T1],Microsoft.FSharp.Collections.FSharpList`1[T2]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unzip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[T1,T2]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Unzip3(Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`3[T1,T2,T3]])" attrib="22" static="true" returntype="System.Tuple`3[Microsoft.FSharp.Collections.FSharpList`1[T1],Microsoft.FSharp.Collections.FSharpList`1[T2],Microsoft.FSharp.Collections.FSharpList`1[T3]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unzip3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`3[T1,T2,T3]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[T1,T2]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip3(Microsoft.FSharp.Collections.FSharpList`1[T1], Microsoft.FSharp.Collections.FSharpList`1[T2], Microsoft.FSharp.Collections.FSharpList`1[T3])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`3[T1,T2,T3]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zip3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T1]" />
                  <parameter name="list2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T2]" />
                  <parameter name="list3" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T3]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="MapModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Add(TKey, T, Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="add" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                  <parameter name="table" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ContainsKey(TKey, Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="containsKey" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="empty" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.GeneralizableValueAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Find(TKey, Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="find" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FindKey(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="TKey">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="findKey" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]], TState, Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="table" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsEmpty(Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isEmpty" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="table" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfArray(System.Tuple`2[TKey,T][])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="System.Tuple`2[TKey,T][]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfList(Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[TKey,T]])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[TKey,T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfSeq(System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,T]])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Collections.FSharpMap`2[TKey,T],Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="partition" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Pick(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Remove(TKey, Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="remove" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Tuple`2[TKey,T][]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="table" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[TKey,T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="table" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSeq(Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="table" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFind(TKey, Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFind" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFindKey(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TKey]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFindKey" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryPick(Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]], Microsoft.FSharp.Collections.FSharpMap`2[TKey,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryPick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TKey,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]]" />
                  <parameter name="table" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpMap`2[TKey,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="SeqModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Append(System.Collections.Generic.IEnumerable`1[T], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="append" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="average" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AverageBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="averageBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cache(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="cache" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cast(System.Collections.IEnumerable)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="cast" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Choose(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="choose" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Collect(Microsoft.FSharp.Core.FSharpFunc`2[T,TCollection], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="collect" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TCollection]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Collections.Generic.IEnumerable`1[TResult]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CompareWith(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]], System.Collections.Generic.IEnumerable`1[T], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="compareWith" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,System.Int32]]" />
                  <parameter name="source1" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                  <parameter name="source2" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Collections.Generic.IEnumerable`1[TCollection])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="concat" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="sources" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TCollection]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TCollection" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Collections.Generic.IEnumerable`1[T]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CountBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,System.Int32]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="countBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Delay(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable`1[T]])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="delay" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="generator" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="distinct" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DistinctBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="distinctBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="empty" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.GeneralizableValueAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ExactlyOne(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exactlyOne" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]], System.Collections.Generic.IEnumerable`1[T1], System.Collections.Generic.IEnumerable`1[T2])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]]" />
                  <parameter name="source1" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T1]" />
                  <parameter name="source2" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Find(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="find" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FindIndex(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="findIndex" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="source" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]], System.Collections.Generic.IEnumerable`1[T1], System.Collections.Generic.IEnumerable`1[T2])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,System.Boolean]]" />
                  <parameter name="source1" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T1]" />
                  <parameter name="source2" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Get(System.Int32, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="nth" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,System.Collections.Generic.IEnumerable`1[T]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="groupBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Head(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="head" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Initialize(System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InitializeInfinite(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="initInfinite" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="initializer" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsEmpty(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isEmpty" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]], System.Collections.Generic.IEnumerable`1[T1], System.Collections.Generic.IEnumerable`1[T2])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="source1" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T1]" />
                  <parameter name="source2" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="last" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Length(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]], System.Collections.Generic.IEnumerable`1[T1], System.Collections.Generic.IEnumerable`1[T2])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" />
                  <parameter name="source1" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T1]" />
                  <parameter name="source2" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="max" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MaxBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="maxBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="min" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MinBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="minBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfArray(T[])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfList(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Pairwise(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Tuple`2[T,T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pairwise" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Pick(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ReadOnly(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="readonly" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reduce(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="reduce" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="reduction" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Scan(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TState]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="source" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Singleton(T)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="singleton" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Skip(System.Int32, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="skip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="skipWhile" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sort(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sort" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TKey], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sortBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sum" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SumBy(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sumBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="projection" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Take(System.Int32, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="take" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="takeWhile" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Truncate(System.Int32, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="truncate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFind(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFind" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFindIndex(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryFindIndex" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryPick(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tryPick" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Unfold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[T,TState]]], TState)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unfold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="generator" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[T,TState]]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TState" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="where" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Windowed(System.Int32, System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T[]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="windowed" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="windowSize" position="0" attrib="0" type="System.Int32" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(System.Collections.Generic.IEnumerable`1[T1], System.Collections.Generic.IEnumerable`1[T2])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Tuple`2[T1,T2]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T1]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip3(System.Collections.Generic.IEnumerable`1[T1], System.Collections.Generic.IEnumerable`1[T2], System.Collections.Generic.IEnumerable`1[T3])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Tuple`3[T1,T2,T3]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="zip3" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T1]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T2]" />
                  <parameter name="source3" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[T3]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="SetModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Add(T, Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="add" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(T, Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="contains" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="element" position="0" attrib="0" type="T" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="count" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Difference(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="difference" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="empty" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.GeneralizableValueAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="set" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]], Microsoft.FSharp.Collections.FSharpSet`1[T], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="intersect" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IntersectMany(System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Collections.FSharpSet`1[T]])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="intersectMany" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="sets" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Collections.FSharpSet`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsEmpty(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isEmpty" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsProperSubset(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isProperSubset" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsProperSuperset(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isProperSuperset" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsSubset(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isSubset" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsSuperset(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isSuperset" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MaxElement(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="maxElement" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MinElement(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="minElement" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfArray(T[])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfList(Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfSeq(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Collections.FSharpSet`1[T],Microsoft.FSharp.Collections.FSharpSet`1[T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="partition" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Remove(T, Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="remove" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                  <parameter name="set" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Singleton(T)" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="singleton" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSeq(Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toSeq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(Microsoft.FSharp.Collections.FSharpSet`1[T], Microsoft.FSharp.Collections.FSharpSet`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="union" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="set1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                  <parameter name="set2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpSet`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="UnionMany(System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Collections.FSharpSet`1[T]])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unionMany" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="sets" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Collections.FSharpSet`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Control">
        <classes>
          <class name="CommonExtensions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="AddToObservable(System.IObservable`1[T], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="Add" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.IObservable`1[T]" />
                  <parameter name="callback" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsyncRead(System.IO.Stream, System.Byte[], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="AsyncRead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="buffer" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                  <parameter name="count" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AsyncReadBytes(System.IO.Stream, System.Int32)" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Byte[]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="AsyncRead" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AsyncWrite(System.IO.Stream, System.Byte[], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="AsyncWrite" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="stream" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="buffer" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                  <parameter name="count" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="SubscribeToObservable(System.IObservable`1[T], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="System.IDisposable">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="Subscribe" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.IObservable`1[T]" />
                  <parameter name="callback" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="EventModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Add(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="add" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="sourceEvent" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Choose(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[TResult],TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="choose" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="sourceEvent" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[T],T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="sourceEvent" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[TResult],TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="sourceEvent" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Merge(Microsoft.FSharp.Control.IEvent`2[TDel1,T], Microsoft.FSharp.Control.IEvent`2[TDel2,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[T],T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="merge" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="event1" position="0" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel1,T]" />
                  <parameter name="event2" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel2,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDel1" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TDel2" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Pairwise(Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[System.Tuple`2[T,T]],System.Tuple`2[T,T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pairwise" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="sourceEvent" position="0" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[T],T],Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[T],T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="partition" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="sourceEvent" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Scan(Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], TResult, Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[TResult],TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="collector" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                  <parameter name="state" position="1" attrib="0" type="TResult" />
                  <parameter name="sourceEvent" position="2" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Split(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpChoice`2[TResult1,TResult2]], Microsoft.FSharp.Control.IEvent`2[TDel,T])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[TResult1],TResult1],Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[TResult2],TResult2]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="split" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="splitter" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpChoice`2[TResult1,TResult2]]" />
                  <parameter name="sourceEvent" position="1" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult1" attributes="0" />
                  <generic-parameter name="TResult2" attributes="0" />
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpAsync" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpAsync" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <properties>
              <property name="CancellationToken" attrib="0" ptype="Microsoft.FSharp.Control.FSharpAsync`1[System.Threading.CancellationToken]">
                <methods>
                  <method name="get_CancellationToken()" attrib="2070" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Threading.CancellationToken]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DefaultCancellationToken" attrib="0" ptype="System.Threading.CancellationToken">
                <methods>
                  <method name="get_DefaultCancellationToken()" attrib="2070" static="true" returntype="System.Threading.CancellationToken">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AsBeginEnd(Microsoft.FSharp.Core.FSharpFunc`2[TArg,Microsoft.FSharp.Control.FSharpAsync`1[T]])" attrib="22" static="true" returntype="System.Tuple`3[Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[TArg,System.AsyncCallback,System.Object],System.IAsyncResult],Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T],Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,Microsoft.FSharp.Core.Unit]]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TArg,Microsoft.FSharp.Control.FSharpAsync`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TArg" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AwaitEvent(Microsoft.FSharp.Control.IEvent`2[TDel,T], Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="event" position="0" attrib="0" type="Microsoft.FSharp.Control.IEvent`2[TDel,T]" />
                  <parameter name="cancelAction" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDel" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AwaitIAsyncResult(System.IAsyncResult, Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Boolean]">
                <parameters>
                  <parameter name="iar" position="0" attrib="0" type="System.IAsyncResult" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AwaitTask(System.Threading.Tasks.Task`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="task" position="0" attrib="0" type="System.Threading.Tasks.Task`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AwaitWaitHandle(System.Threading.WaitHandle, Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Boolean]">
                <parameters>
                  <parameter name="waitHandle" position="0" attrib="0" type="System.Threading.WaitHandle" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="CancelDefaultToken()" attrib="22" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Catch(Microsoft.FSharp.Control.FSharpAsync`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.FSharpChoice`2[T,System.Exception]]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FromBeginEnd(Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`2[System.AsyncCallback,System.Object],System.IAsyncResult], Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T], Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="beginAction" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`2[System.AsyncCallback,System.Object],System.IAsyncResult]" />
                  <parameter name="endAction" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T]" />
                  <parameter name="cancelAction" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FromBeginEnd(TArg1, Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[TArg1,System.AsyncCallback,System.Object],System.IAsyncResult], Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T], Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="TArg1" />
                  <parameter name="beginAction" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[TArg1,System.AsyncCallback,System.Object],System.IAsyncResult]" />
                  <parameter name="endAction" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T]" />
                  <parameter name="cancelAction" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TArg1" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FromBeginEnd(TArg1, TArg2, Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`4[TArg1,TArg2,System.AsyncCallback,System.Object],System.IAsyncResult], Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T], Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="TArg1" />
                  <parameter name="arg2" position="1" attrib="0" type="TArg2" />
                  <parameter name="beginAction" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`4[TArg1,TArg2,System.AsyncCallback,System.Object],System.IAsyncResult]" />
                  <parameter name="endAction" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T]" />
                  <parameter name="cancelAction" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TArg1" attributes="0" />
                  <generic-parameter name="TArg2" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FromBeginEnd(TArg1, TArg2, TArg3, Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`5[TArg1,TArg2,TArg3,System.AsyncCallback,System.Object],System.IAsyncResult], Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T], Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="TArg1" />
                  <parameter name="arg2" position="1" attrib="0" type="TArg2" />
                  <parameter name="arg3" position="2" attrib="0" type="TArg3" />
                  <parameter name="beginAction" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`5[TArg1,TArg2,TArg3,System.AsyncCallback,System.Object],System.IAsyncResult]" />
                  <parameter name="endAction" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.IAsyncResult,T]" />
                  <parameter name="cancelAction" position="5" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TArg1" attributes="0" />
                  <generic-parameter name="TArg2" attributes="0" />
                  <generic-parameter name="TArg3" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FromContinuations(Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit],Microsoft.FSharp.Core.FSharpFunc`2[System.Exception,Microsoft.FSharp.Core.Unit],Microsoft.FSharp.Core.FSharpFunc`2[System.OperationCanceledException,Microsoft.FSharp.Core.Unit]],Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit],Microsoft.FSharp.Core.FSharpFunc`2[System.Exception,Microsoft.FSharp.Core.Unit],Microsoft.FSharp.Core.FSharpFunc`2[System.OperationCanceledException,Microsoft.FSharp.Core.Unit]],Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Ignore(Microsoft.FSharp.Control.FSharpAsync`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OnCancel(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.IDisposable]">
                <parameters>
                  <parameter name="interruption" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
              </method>
              <method name="Parallel(System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Control.FSharpAsync`1[T]])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T[]]">
                <parameters>
                  <parameter name="computations" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Control.FSharpAsync`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="RunSynchronously(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="22" static="true" returntype="T">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                  <parameter name="cancellationToken" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sleep(System.Int32)" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters>
                  <parameter name="millisecondsDueTime" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Start(Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="22" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="StartAsTask(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.Tasks.TaskCreationOptions], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="22" static="true" returntype="System.Threading.Tasks.Task`1[T]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="taskCreationOptions" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.Tasks.TaskCreationOptions]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                  <parameter name="cancellationToken" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="StartChild(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Control.FSharpAsync`1[T]]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="millisecondsTimeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="StartChildAsTask(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.Tasks.TaskCreationOptions])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Threading.Tasks.Task`1[T]]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="taskCreationOptions" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.Tasks.TaskCreationOptions]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="StartImmediate(Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="22" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="StartWithContinuations(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpFunc`2[System.Exception,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpFunc`2[System.OperationCanceledException,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="22" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="continuation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="exceptionContinuation" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Exception,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="cancellationContinuation" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.OperationCanceledException,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="cancellationToken" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SwitchToContext(System.Threading.SynchronizationContext)" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters>
                  <parameter name="syncContext" position="0" attrib="0" type="System.Threading.SynchronizationContext" />
                </parameters>
              </method>
              <method name="SwitchToNewThread()" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters />
              </method>
              <method name="SwitchToThreadPool()" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters />
              </method>
              <method name="TryCancelled(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpFunc`2[System.OperationCanceledException,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="compensation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.OperationCanceledException,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpAsyncBuilder" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpAsyncBuilder" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <methods>
              <method name="Bind(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Control.FSharpAsync`1[TResult]])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[TResult]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="binder" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Control.FSharpAsync`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Combine(Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Control.FSharpAsync`1[T])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="computation1" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]" />
                  <parameter name="computation2" position="1" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Delay(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync`1[T]])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="generator" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="For(System.Collections.Generic.IEnumerable`1[T], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters>
                  <parameter name="sequence" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                  <parameter name="body" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Return(T)" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ReturnFrom(Microsoft.FSharp.Control.FSharpAsync`1[T])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryFinally(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="compensation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryWith(Microsoft.FSharp.Control.FSharpAsync`1[T], Microsoft.FSharp.Core.FSharpFunc`2[System.Exception,Microsoft.FSharp.Control.FSharpAsync`1[T]])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[T]" />
                  <parameter name="catchHandler" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Exception,Microsoft.FSharp.Control.FSharpAsync`1[T]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(T, Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Control.FSharpAsync`1[TResult]])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[TResult]">
                <parameters>
                  <parameter name="resource" position="0" attrib="0" type="T" />
                  <parameter name="binder" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Control.FSharpAsync`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.IDisposable" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="While(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,System.Boolean], Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters>
                  <parameter name="guard" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,System.Boolean]" />
                  <parameter name="computation" position="1" attrib="0" type="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]" />
                </parameters>
              </method>
              <method name="Zero()" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="FSharpAsyncReplyChannel`1" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpAsyncReplyChannel`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="TReply" attributes="0" />
            </generic-parameters>
            <methods>
              <method name="Reply(TReply)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="TReply" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpAsync`1" type="class" base="System.Object" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpAsync`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.NoComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.NoEqualityAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
          </class>
          <class name="FSharpDelegateEvent`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpDelegateEvent`1" />
                </properties>
              </attribute>
            </attributes>
            <generic-parameters>
              <generic-parameter name="TDelegate" attributes="0">
                <generic-parameter-constraints>
                  <generic-parameter-constraint name="System.Delegate" />
                </generic-parameter-constraints>
              </generic-parameter>
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Publish" attrib="0" ptype="Microsoft.FSharp.Control.IDelegateEvent`1[TDelegate]">
                <methods>
                  <method name="get_Publish()" attrib="2182" returntype="Microsoft.FSharp.Control.IDelegateEvent`1[TDelegate]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Trigger(System.Object[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpEvent`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpEvent`1" />
                </properties>
              </attribute>
            </attributes>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Publish" attrib="0" ptype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[T],T]">
                <methods>
                  <method name="get_Publish()" attrib="2182" returntype="Microsoft.FSharp.Control.IEvent`2[Microsoft.FSharp.Control.FSharpHandler`1[T],T]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Trigger(T)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="T" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpEvent`2" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpEvent`2" />
                </properties>
              </attribute>
            </attributes>
            <generic-parameters>
              <generic-parameter name="TDelegate" attributes="0">
                <generic-parameter-constraints>
                  <generic-parameter-constraint name="System.Delegate" />
                </generic-parameter-constraints>
              </generic-parameter>
              <generic-parameter name="TArgs" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Publish" attrib="0" ptype="Microsoft.FSharp.Control.IEvent`2[TDelegate,TArgs]">
                <methods>
                  <method name="get_Publish()" attrib="2182" returntype="Microsoft.FSharp.Control.IEvent`2[TDelegate,TArgs]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Trigger(System.Object, TArgs)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="args" position="1" attrib="0" type="TArgs" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpHandler`1" type="delegate" base="System.MulticastDelegate" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpHandler`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.Object, T, System.AsyncCallback, System.Object)" attrib="710" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="args" position="1" attrib="0" type="T" />
                  <parameter name="callback" position="2" attrib="0" type="System.AsyncCallback" />
                  <parameter name="objects" position="3" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="710" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(System.Object, T)" attrib="710" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                  <parameter name="args" position="1" attrib="0" type="T" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpMailboxProcessor`1" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoSerializableAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpMailboxProcessor`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TMsg" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpMailboxProcessor`1[TMsg],Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="6150">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpMailboxProcessor`1[TMsg],Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CurrentQueueLength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_CurrentQueueLength()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DefaultTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_DefaultTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_DefaultTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Error" attrib="0" eventtype="Microsoft.FSharp.Control.FSharpHandler`1[System.Exception]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CLIEventAttribute" />
                </attributes>
              </event>
            </events>
            <methods>
              <method name="Post(TMsg)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="TMsg" />
                </parameters>
              </method>
              <method name="PostAndAsyncReply(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[TReply]">
                <parameters>
                  <parameter name="buildMessage" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TReply" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PostAndReply(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="TReply">
                <parameters>
                  <parameter name="buildMessage" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TReply" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PostAndTryAsyncReply(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.FSharpOption`1[TReply]]">
                <parameters>
                  <parameter name="buildMessage" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TReply" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Receive(Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[TMsg]">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Scan(Microsoft.FSharp.Core.FSharpFunc`2[TMsg,Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Control.FSharpAsync`1[T]]], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[T]">
                <parameters>
                  <parameter name="scanner" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TMsg,Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Control.FSharpAsync`1[T]]]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Start()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Start(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpMailboxProcessor`1[TMsg],Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]], Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpMailboxProcessor`1[TMsg]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpMailboxProcessor`1[TMsg],Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Threading.CancellationToken]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TryPostAndReply(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Core.FSharpOption`1[TReply]">
                <parameters>
                  <parameter name="buildMessage" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1[TReply],TMsg]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TReply" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TryReceive(Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.FSharpOption`1[TMsg]]">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TryScan(Microsoft.FSharp.Core.FSharpFunc`2[TMsg,Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Control.FSharpAsync`1[T]]], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="134" returntype="Microsoft.FSharp.Control.FSharpAsync`1[Microsoft.FSharp.Core.FSharpOption`1[T]]">
                <parameters>
                  <parameter name="scanner" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TMsg,Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Control.FSharpAsync`1[T]]]" />
                  <parameter name="timeout" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="IDelegateEvent`1" type="interface" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="TDelegate" attributes="0">
                <generic-parameter-constraints>
                  <generic-parameter-constraint name="System.Delegate" />
                </generic-parameter-constraints>
              </generic-parameter>
            </generic-parameters>
            <methods>
              <method name="AddHandler(TDelegate)" attrib="1222" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="handler" position="0" attrib="0" type="TDelegate" />
                </parameters>
              </method>
              <method name="RemoveHandler(TDelegate)" attrib="1222" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="handler" position="0" attrib="0" type="TDelegate" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IEvent`2" type="interface" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.InterfaceAttribute" />
            </attributes>
            <interfaces>
              <interface name="Microsoft.FSharp.Control.IDelegateEvent`1[TDelegate]" />
              <interface name="System.IObservable`1[TArgs]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TDelegate" attributes="0">
                <generic-parameter-constraints>
                  <generic-parameter-constraint name="System.Delegate" />
                </generic-parameter-constraints>
              </generic-parameter>
              <generic-parameter name="TArgs" attributes="0" />
            </generic-parameters>
          </class>
          <class name="LazyExtensions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="Create(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,T])" attrib="22" static="true" returntype="System.Lazy`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="Create" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="creator" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CreateFromValue(T)" attrib="22" static="true" returntype="System.Lazy`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="CreateFromValue" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Force(System.Lazy`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="Force" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="" position="0" attrib="0" type="System.Lazy`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ObservableModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Add(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], System.IObservable`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="add" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Choose(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], System.IObservable`1[T])" attrib="22" static="true" returntype="System.IObservable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="choose" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="chooser" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Filter(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.IObservable`1[T])" attrib="22" static="true" returntype="System.IObservable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="filter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], System.IObservable`1[T])" attrib="22" static="true" returntype="System.IObservable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Merge(System.IObservable`1[T], System.IObservable`1[T])" attrib="22" static="true" returntype="System.IObservable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="merge" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.IObservable`1[T]" />
                  <parameter name="source2" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Pairwise(System.IObservable`1[T])" attrib="22" static="true" returntype="System.IObservable`1[System.Tuple`2[T,T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pairwise" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Partition(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], System.IObservable`1[T])" attrib="22" static="true" returntype="System.Tuple`2[System.IObservable`1[T],System.IObservable`1[T]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="partition" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Scan(Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]], TResult, System.IObservable`1[T])" attrib="22" static="true" returntype="System.IObservable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="scan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="collector" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]]" />
                  <parameter name="state" position="1" attrib="0" type="TResult" />
                  <parameter name="source" position="2" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Split(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpChoice`2[TResult1,TResult2]], System.IObservable`1[T])" attrib="22" static="true" returntype="System.Tuple`2[System.IObservable`1[TResult1],System.IObservable`1[TResult2]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="split" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="splitter" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpChoice`2[TResult1,TResult2]]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult1" attributes="0" />
                  <generic-parameter name="TResult2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Subscribe(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], System.IObservable`1[T])" attrib="22" static="true" returntype="System.IDisposable">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="subscribe" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="source" position="1" attrib="0" type="System.IObservable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="WebExtensions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="AsyncDownloadString(System.Net.WebClient, System.Uri)" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.String]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="AsyncDownloadString" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="this" position="0" attrib="0" type="System.Net.WebClient" />
                  <parameter name="address" position="1" attrib="0" type="System.Uri" />
                </parameters>
              </method>
              <method name="AsyncGetResponse(System.Net.WebRequest)" attrib="22" static="true" returntype="Microsoft.FSharp.Control.FSharpAsync`1[System.Net.WebResponse]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="AsyncGetResponse" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="" position="0" attrib="0" type="System.Net.WebRequest" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Core">
        <classes>
          <class name="AbstractClassAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="AllowNullLiteralAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="AutoOpenAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="ValidOn" value="Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Path" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Path()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AutoSerializableAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6150">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CLIEventAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Property" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="CLIMutableAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ClassAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ComparisonConditionalOnAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="GenericParameter" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="CompilationArgumentCountsAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Int32[])" attrib="6150">
                <parameters>
                  <parameter name="counts" position="0" attrib="0" type="System.Int32[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Counts" attrib="0" ptype="System.Collections.Generic.IEnumerable`1[System.Int32]">
                <methods>
                  <method name="get_Counts()" attrib="2182" returntype="System.Collections.Generic.IEnumerable`1[System.Int32]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CompilationMappingAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(Microsoft.FSharp.Core.SourceConstructFlags)" attrib="6150">
                <parameters>
                  <parameter name="sourceConstructFlags" position="0" attrib="0" type="Microsoft.FSharp.Core.SourceConstructFlags" />
                </parameters>
              </constructor>
              <constructor name=".ctor(Microsoft.FSharp.Core.SourceConstructFlags, System.Int32)" attrib="6150">
                <parameters>
                  <parameter name="sourceConstructFlags" position="0" attrib="0" type="Microsoft.FSharp.Core.SourceConstructFlags" />
                  <parameter name="sequenceNumber" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(Microsoft.FSharp.Core.SourceConstructFlags, System.Int32, System.Int32)" attrib="6150">
                <parameters>
                  <parameter name="sourceConstructFlags" position="0" attrib="0" type="Microsoft.FSharp.Core.SourceConstructFlags" />
                  <parameter name="variantNumber" position="1" attrib="0" type="System.Int32" />
                  <parameter name="sequenceNumber" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SequenceNumber" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SequenceNumber()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SourceConstructFlags" attrib="0" ptype="Microsoft.FSharp.Core.SourceConstructFlags">
                <methods>
                  <method name="get_SourceConstructFlags()" attrib="2182" returntype="Microsoft.FSharp.Core.SourceConstructFlags">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="VariantNumber" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_VariantNumber()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CompilationRepresentationAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(Microsoft.FSharp.Core.CompilationRepresentationFlags)" attrib="6150">
                <parameters>
                  <parameter name="flags" position="0" attrib="0" type="Microsoft.FSharp.Core.CompilationRepresentationFlags" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Flags" attrib="0" ptype="Microsoft.FSharp.Core.CompilationRepresentationFlags">
                <methods>
                  <method name="get_Flags()" attrib="2182" returntype="Microsoft.FSharp.Core.CompilationRepresentationFlags">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CompilationRepresentationFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Event" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilationRepresentationFlags" value="16" />
              <field name="Instance" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilationRepresentationFlags" value="2" />
              <field name="ModuleSuffix" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilationRepresentationFlags" value="4" />
              <field name="None" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilationRepresentationFlags" value="0" />
              <field name="Static" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilationRepresentationFlags" value="1" />
              <field name="UseNullAsTrueValue" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilationRepresentationFlags" value="8" />
            </fields>
          </class>
          <class name="CompilationSourceNameAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="sourceName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SourceName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SourceName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CompiledNameAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Delegate, Interface, Field, Property, Method, Enum, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="compiledName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CompiledName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CompiledName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CompilerMessageAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6150">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="messageNumber" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsError" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsError()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsError(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsHidden" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsHidden()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsHidden(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="MessageNumber" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MessageNumber()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CustomComparisonAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="CustomEqualityAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="CustomOperationAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllowIntoPattern" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowIntoPattern()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AllowIntoPattern(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsLikeGroupJoin" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLikeGroupJoin()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsLikeGroupJoin(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsLikeJoin" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLikeJoin()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsLikeJoin(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsLikeZip" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLikeZip()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsLikeZip(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="JoinConditionWord" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_JoinConditionWord()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_JoinConditionWord(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MaintainsVariableSpace" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MaintainsVariableSpace()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_MaintainsVariableSpace(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MaintainsVariableSpaceUsingBind" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_MaintainsVariableSpaceUsingBind()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_MaintainsVariableSpaceUsingBind(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DefaultAugmentationAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Boolean)" attrib="6150">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="DefaultValueAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Field" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6150">
                <parameters>
                  <parameter name="check" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Check" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Check()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="EntryPointAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="EqualityConditionalOnAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="GenericParameter" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ExperimentalAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ExtraTopLevelOperators" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <properties>
              <property name="DefaultAsyncBuilder" attrib="0" ptype="Microsoft.FSharp.Control.FSharpAsyncBuilder">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                  <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                    <properties>
                      <property name="CompiledName" value="DefaultAsyncBuilder" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_DefaultAsyncBuilder()" attrib="2070" static="true" returntype="Microsoft.FSharp.Control.FSharpAsyncBuilder">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="query" attrib="0" ptype="Microsoft.FSharp.Linq.QueryBuilder">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_query()" attrib="2070" static="true" returntype="Microsoft.FSharp.Linq.QueryBuilder">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateArray2D(System.Collections.Generic.IEnumerable`1[?])" attrib="22" static="true" returntype="T[0...,0...]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="array2D" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="rows" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[?]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="?" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Collections.Generic.IEnumerable`1[T]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CreateDictionary(System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,TValue]])" attrib="22" static="true" returntype="System.Collections.Generic.IDictionary`2[TKey,TValue]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="dict" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="keyValuePairs" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Tuple`2[TKey,TValue]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CreateSet(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpSet`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="set" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LazyPattern(System.Lazy`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Lazy|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="System.Lazy`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormat(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="printf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatLine(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="printfn" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatLineToError(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="eprintfn" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatLineToTextWriter(System.IO.TextWriter, Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fprintfn" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="textWriter" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToError(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="eprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToString(Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,System.String])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,System.String]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToStringThenFail(Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="failwithf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToTextWriter(System.IO.TextWriter, Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="textWriter" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SpliceExpression(Microsoft.FSharp.Quotations.FSharpExpr`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="op_Splice" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SpliceUntypedExpression(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="op_SpliceUntyped" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToByte(T)" attrib="22" static="true" returntype="System.Byte">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint8" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDouble(T)" attrib="22" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="double" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSByte(T)" attrib="22" static="true" returntype="System.SByte">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int8" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSingle(T)" attrib="22" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="single" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpChoice`2" type="class" base="System.Object" abstract="true" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpChoice`2" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="IsChoice1Of2" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice1Of2()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice2Of2" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice2Of2()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpChoice`2[T1,T2])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpChoice`2[T1,T2])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="NewChoice1Of2(T1)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T1" />
                </parameters>
              </method>
              <method name="NewChoice2Of2(T2)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T2" />
                </parameters>
              </method>
              <method name="get_IsChoice1Of2()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice2Of2()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Choice1Of2" type="class" base="Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`2/Choice1Of2@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T1">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="0" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T1">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T1">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice2Of2" type="class" base="Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`2/Choice2Of2@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`2[T1,T2]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="1" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T2">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T2">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Choice1Of2" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Choice2Of2" attrib="32854" fieldtype="System.Int32" value="1" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpChoice`3" type="class" base="System.Object" abstract="true" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpChoice`3" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="IsChoice1Of3" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice1Of3()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice2Of3" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice2Of3()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice3Of3" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice3Of3()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="NewChoice1Of3(T1)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T1" />
                </parameters>
              </method>
              <method name="NewChoice2Of3(T2)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T2" />
                </parameters>
              </method>
              <method name="NewChoice3Of3(T3)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T3" />
                </parameters>
              </method>
              <method name="get_IsChoice1Of3()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice2Of3()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice3Of3()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Choice1Of3" type="class" base="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`3/Choice1Of3@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T1">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="0" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T1">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T1">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice2Of3" type="class" base="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`3/Choice2Of3@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="1" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T2">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T2">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice3Of3" type="class" base="Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`3/Choice3Of3@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`3[T1,T2,T3]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="2" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T3">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T3">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Choice1Of3" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Choice2Of3" attrib="32854" fieldtype="System.Int32" value="1" />
                  <field name="Choice3Of3" attrib="32854" fieldtype="System.Int32" value="2" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpChoice`4" type="class" base="System.Object" abstract="true" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpChoice`4" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="IsChoice1Of4" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice1Of4()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice2Of4" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice2Of4()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice3Of4" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice3Of4()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice4Of4" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice4Of4()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="NewChoice1Of4(T1)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T1" />
                </parameters>
              </method>
              <method name="NewChoice2Of4(T2)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T2" />
                </parameters>
              </method>
              <method name="NewChoice3Of4(T3)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T3" />
                </parameters>
              </method>
              <method name="NewChoice4Of4(T4)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T4" />
                </parameters>
              </method>
              <method name="get_IsChoice1Of4()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice2Of4()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice3Of4()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice4Of4()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Choice1Of4" type="class" base="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`4/Choice1Of4@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T1">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="0" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T1">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T1">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice2Of4" type="class" base="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`4/Choice2Of4@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="1" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T2">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T2">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice3Of4" type="class" base="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`4/Choice3Of4@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="2" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T3">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T3">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice4Of4" type="class" base="Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`4/Choice4Of4@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`4[T1,T2,T3,T4]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T4">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="3" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T4">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T4">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Choice1Of4" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Choice2Of4" attrib="32854" fieldtype="System.Int32" value="1" />
                  <field name="Choice3Of4" attrib="32854" fieldtype="System.Int32" value="2" />
                  <field name="Choice4Of4" attrib="32854" fieldtype="System.Int32" value="3" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpChoice`5" type="class" base="System.Object" abstract="true" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpChoice`5" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="IsChoice1Of5" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice1Of5()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice2Of5" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice2Of5()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice3Of5" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice3Of5()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice4Of5" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice4Of5()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice5Of5" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice5Of5()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="NewChoice1Of5(T1)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T1" />
                </parameters>
              </method>
              <method name="NewChoice2Of5(T2)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T2" />
                </parameters>
              </method>
              <method name="NewChoice3Of5(T3)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T3" />
                </parameters>
              </method>
              <method name="NewChoice4Of5(T4)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T4" />
                </parameters>
              </method>
              <method name="NewChoice5Of5(T5)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T5" />
                </parameters>
              </method>
              <method name="get_IsChoice1Of5()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice2Of5()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice3Of5()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice4Of5()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice5Of5()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Choice1Of5" type="class" base="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`5/Choice1Of5@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T1">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="0" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T1">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T1">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice2Of5" type="class" base="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`5/Choice2Of5@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="1" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T2">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T2">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice3Of5" type="class" base="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`5/Choice3Of5@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="2" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T3">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T3">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice4Of5" type="class" base="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`5/Choice4Of5@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T4">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="3" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T4">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T4">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice5Of5" type="class" base="Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`5/Choice5Of5@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`5[T1,T2,T3,T4,T5]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T5">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="4" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T5">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T5">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Choice1Of5" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Choice2Of5" attrib="32854" fieldtype="System.Int32" value="1" />
                  <field name="Choice3Of5" attrib="32854" fieldtype="System.Int32" value="2" />
                  <field name="Choice4Of5" attrib="32854" fieldtype="System.Int32" value="3" />
                  <field name="Choice5Of5" attrib="32854" fieldtype="System.Int32" value="4" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpChoice`6" type="class" base="System.Object" abstract="true" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpChoice`6" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
              <generic-parameter name="T6" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="IsChoice1Of6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice1Of6()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice2Of6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice2Of6()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice3Of6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice3Of6()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice4Of6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice4Of6()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice5Of6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice5Of6()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice6Of6" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice6Of6()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="NewChoice1Of6(T1)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T1" />
                </parameters>
              </method>
              <method name="NewChoice2Of6(T2)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T2" />
                </parameters>
              </method>
              <method name="NewChoice3Of6(T3)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T3" />
                </parameters>
              </method>
              <method name="NewChoice4Of6(T4)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T4" />
                </parameters>
              </method>
              <method name="NewChoice5Of6(T5)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T5" />
                </parameters>
              </method>
              <method name="NewChoice6Of6(T6)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T6" />
                </parameters>
              </method>
              <method name="get_IsChoice1Of6()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice2Of6()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice3Of6()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice4Of6()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice5Of6()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice6Of6()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Choice1Of6" type="class" base="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`6/Choice1Of6@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T1">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="0" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T1">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T1">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice2Of6" type="class" base="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`6/Choice2Of6@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="1" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T2">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T2">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice3Of6" type="class" base="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`6/Choice3Of6@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="2" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T3">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T3">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice4Of6" type="class" base="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`6/Choice4Of6@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T4">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="3" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T4">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T4">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice5Of6" type="class" base="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`6/Choice5Of6@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T5">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="4" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T5">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T5">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice6Of6" type="class" base="Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`6/Choice6Of6@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`6[T1,T2,T3,T4,T5,T6]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T6">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="5" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T6">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T6">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Choice1Of6" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Choice2Of6" attrib="32854" fieldtype="System.Int32" value="1" />
                  <field name="Choice3Of6" attrib="32854" fieldtype="System.Int32" value="2" />
                  <field name="Choice4Of6" attrib="32854" fieldtype="System.Int32" value="3" />
                  <field name="Choice5Of6" attrib="32854" fieldtype="System.Int32" value="4" />
                  <field name="Choice6Of6" attrib="32854" fieldtype="System.Int32" value="5" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpChoice`7" type="class" base="System.Object" abstract="true" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpChoice`7" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
              <generic-parameter name="T6" attributes="0" />
              <generic-parameter name="T7" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="IsChoice1Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice1Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice2Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice2Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice3Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice3Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice4Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice4Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice5Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice5Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice6Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice6Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsChoice7Of7" attrib="0" ptype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_IsChoice7Of7()" attrib="134" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Tag()" attrib="134" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="NewChoice1Of7(T1)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T1" />
                </parameters>
              </method>
              <method name="NewChoice2Of7(T2)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T2" />
                </parameters>
              </method>
              <method name="NewChoice3Of7(T3)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T3" />
                </parameters>
              </method>
              <method name="NewChoice4Of7(T4)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T4" />
                </parameters>
              </method>
              <method name="NewChoice5Of7(T5)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T5" />
                </parameters>
              </method>
              <method name="NewChoice6Of7(T6)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T6" />
                </parameters>
              </method>
              <method name="NewChoice7Of7(T7)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T7" />
                </parameters>
              </method>
              <method name="get_IsChoice1Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice2Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice3Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice4Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice5Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice6Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_IsChoice7Of7()" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Tag()" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Choice1Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice1Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T1">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="0" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T1">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T1">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice2Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice2Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="1" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T2">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T2">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice3Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice3Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="2" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T3">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T3">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice4Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice4Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T4">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="3" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T4">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T4">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice5Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice5Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T5">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="4" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T5">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T5">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice6Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice6Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T6">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="5" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T6">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T6">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Choice7Of7" type="class" base="Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                    <properties>
                      <property name="ProxyTypeName" value="Microsoft.FSharp.Core.FSharpChoice`7/Choice7Of7@DebugTypeProxy" />
                    </properties>
                  </attribute>
                </attributes>
                <interfaces>
                  <interface name="System.Collections.IStructuralComparable" />
                  <interface name="System.Collections.IStructuralEquatable" />
                  <interface name="System.IComparable" />
                  <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                  <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpChoice`7[T1,T2,T3,T4,T5,T6,T7]]" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Item" attrib="0" ptype="T7">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                        <properties>
                          <property name="SourceConstructFlags" value="Field" />
                          <property name="SequenceNumber" value="0" />
                          <property name="VariantNumber" value="6" />
                        </properties>
                      </attribute>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <methods>
                      <method name="get_Item()" attrib="134" returntype="T7">
                        <attributes>
                          <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                          <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                        </attributes>
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="get_Item()" attrib="134" returntype="T7">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </class>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="T6" attributes="0" />
                  <generic-parameter name="T7" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="Choice1Of7" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Choice2Of7" attrib="32854" fieldtype="System.Int32" value="1" />
                  <field name="Choice3Of7" attrib="32854" fieldtype="System.Int32" value="2" />
                  <field name="Choice4Of7" attrib="32854" fieldtype="System.Int32" value="3" />
                  <field name="Choice5Of7" attrib="32854" fieldtype="System.Int32" value="4" />
                  <field name="Choice6Of7" attrib="32854" fieldtype="System.Int32" value="5" />
                  <field name="Choice7Of7" attrib="32854" fieldtype="System.Int32" value="6" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpFunc`2" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
              <generic-parameter name="TResult" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6148">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="FromConverter(System.Converter`2[T,TResult])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]">
                <parameters>
                  <parameter name="converter" position="0" attrib="0" type="System.Converter`2[T,TResult]" />
                </parameters>
              </method>
              <method name="Invoke(T)" attrib="1222" abstract="true" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="InvokeFast(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,V]], T, TResult)" attrib="22" static="true" returntype="V">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,V]]" />
                  <parameter name="arg1" position="1" attrib="0" type="T" />
                  <parameter name="arg2" position="2" attrib="0" type="TResult" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="V" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InvokeFast(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[V,W]]], T, TResult, V)" attrib="22" static="true" returntype="W">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[V,W]]]" />
                  <parameter name="arg1" position="1" attrib="0" type="T" />
                  <parameter name="arg2" position="2" attrib="0" type="TResult" />
                  <parameter name="arg3" position="3" attrib="0" type="V" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="V" attributes="0" />
                  <generic-parameter name="W" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InvokeFast(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[V,Microsoft.FSharp.Core.FSharpFunc`2[W,X]]]], T, TResult, V, W)" attrib="22" static="true" returntype="X">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[V,Microsoft.FSharp.Core.FSharpFunc`2[W,X]]]]" />
                  <parameter name="arg1" position="1" attrib="0" type="T" />
                  <parameter name="arg2" position="2" attrib="0" type="TResult" />
                  <parameter name="arg3" position="3" attrib="0" type="V" />
                  <parameter name="arg4" position="4" attrib="0" type="W" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="V" attributes="0" />
                  <generic-parameter name="W" attributes="0" />
                  <generic-parameter name="X" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InvokeFast(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[V,Microsoft.FSharp.Core.FSharpFunc`2[W,Microsoft.FSharp.Core.FSharpFunc`2[X,Y]]]]], T, TResult, V, W, X)" attrib="22" static="true" returntype="Y">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TResult,Microsoft.FSharp.Core.FSharpFunc`2[V,Microsoft.FSharp.Core.FSharpFunc`2[W,Microsoft.FSharp.Core.FSharpFunc`2[X,Y]]]]]" />
                  <parameter name="arg1" position="1" attrib="0" type="T" />
                  <parameter name="arg2" position="2" attrib="0" type="TResult" />
                  <parameter name="arg3" position="3" attrib="0" type="V" />
                  <parameter name="arg4" position="4" attrib="0" type="W" />
                  <parameter name="arg5" position="5" attrib="0" type="X" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="V" attributes="0" />
                  <generic-parameter name="W" attributes="0" />
                  <generic-parameter name="X" attributes="0" />
                  <generic-parameter name="Y" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToConverter(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult])" attrib="22" static="true" returntype="System.Converter`2[T,TResult]">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                </parameters>
              </method>
              <method name="op_Implicit(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult])" attrib="2070" static="true" returntype="System.Converter`2[T,TResult]">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                </parameters>
              </method>
              <method name="op_Implicit(System.Converter`2[T,TResult])" attrib="2070" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]">
                <parameters>
                  <parameter name="converter" position="0" attrib="0" type="System.Converter`2[T,TResult]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpInterfaceDataVersionAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.Int32, System.Int32, System.Int32)" attrib="6150">
                <parameters>
                  <parameter name="major" position="0" attrib="0" type="System.Int32" />
                  <parameter name="minor" position="1" attrib="0" type="System.Int32" />
                  <parameter name="release" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Major" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Major()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Minor" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Minor()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Release" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Release()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="FSharpOption`1" type="class" base="System.Object" serializable="true" charset="Auto" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="UseNullAsTrueValue" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpOption`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.DefaultAugmentationAttribute">
                <properties>
                  <property name="Value" value="False" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Some({Value})" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpOption`1[T]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpOption`1[T]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T)" attrib="6150">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsNone" attrib="0" ptype="System.Boolean" params="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_IsNone(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsSome" attrib="0" ptype="System.Boolean" params="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_IsSome(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                    <parameters>
                      <parameter name="" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="None" attrib="0" ptype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_None()" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute">
                    <properties>
                      <property name="SourceConstructFlags" value="Field" />
                      <property name="SequenceNumber" value="0" />
                      <property name="VariantNumber" value="1" />
                    </properties>
                  </attribute>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <methods>
                  <method name="get_Value()" attrib="134" returntype="T">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetTag(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
              </method>
              <method name="Some(T)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="get_None()" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="get_Value()" attrib="134" returntype="T">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="Tags" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <fields>
                  <field name="None" attrib="32854" fieldtype="System.Int32" value="0" />
                  <field name="Some" attrib="32854" fieldtype="System.Int32" value="1" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="FSharpRef`1" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpRef`1" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.StructuralComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuralEqualityAttribute" />
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="{contents}" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralComparable" />
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.IComparable" />
              <interface name="System.IComparable`1[Microsoft.FSharp.Core.FSharpRef`1[T]]" />
              <interface name="System.IEquatable`1[Microsoft.FSharp.Core.FSharpRef`1[T]]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <fields>
              <field name="contents@" attrib="6" fieldtype="T">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
            </fields>
            <constructors>
              <constructor name=".ctor(T)" attrib="6150">
                <parameters>
                  <parameter name="contents" position="0" attrib="0" type="T" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="T">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                  <method name="set_Value(T)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="T" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="contents" attrib="0" ptype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                  <attribute name="System.Diagnostics.DebuggerBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_contents()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                  <method name="set_contents(T)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CompareTo(Microsoft.FSharp.Core.FSharpRef`1[T])" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpRef`1[T]" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Equals(Microsoft.FSharp.Core.FSharpRef`1[T])" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpRef`1[T]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="230" virtual="true" sealed="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpTypeFunc" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6148">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Specialize()" attrib="1222" abstract="true" virtual="true" returntype="System.Object">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="FuncConvert" type="class" base="System.Object" sealed="true" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <methods>
              <method name="FuncFromTupled(Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`2[T1,T2],TResult])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`2[T1,T2],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FuncFromTupled(Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[T1,T2,T3],TResult])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]]">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`3[T1,T2,T3],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FuncFromTupled(Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`4[T1,T2,T3,T4],TResult])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,TResult]]]]">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`4[T1,T2,T3,T4],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FuncFromTupled(Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`5[T1,T2,T3,T4,T5],TResult])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,Microsoft.FSharp.Core.FSharpFunc`2[T5,TResult]]]]]">
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Tuple`5[T1,T2,T3,T4,T5],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToFSharpFunc(System.Action`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Action`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToFSharpFunc(System.Converter`2[T,TResult])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]">
                <parameters>
                  <parameter name="converter" position="0" attrib="0" type="System.Converter`2[T,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="GeneralizableValueAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="InterfaceAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Interface" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="LanguagePrimitives" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <properties>
              <property name="GenericComparer" attrib="0" ptype="System.Collections.IComparer">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_GenericComparer()" attrib="2070" static="true" returntype="System.Collections.IComparer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="GenericEqualityComparer" attrib="0" ptype="System.Collections.IEqualityComparer">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_GenericEqualityComparer()" attrib="2070" static="true" returntype="System.Collections.IEqualityComparer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="GenericEqualityERComparer" attrib="0" ptype="System.Collections.IEqualityComparer">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_GenericEqualityERComparer()" attrib="2070" static="true" returntype="System.Collections.IEqualityComparer">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AdditionDynamic(T1, T2)" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by dynamic invocations of F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CheckedAdditionDynamic(T1, T2)" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by dynamic invocations of F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CheckedMultiplyDynamic(T1, T2)" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by dynamic invocations of F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DecimalWithMeasure(System.Decimal)" attrib="22" static="true" returntype="System.Decimal">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.Decimal" />
                </parameters>
              </method>
              <method name="DivideByInt(T, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DivideByIntDynamic(T, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by dynamic invocations of F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="EnumOfValue(T)" attrib="22" static="true" returntype="TEnum">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TEnum" attributes="0" />
                </generic-parameters>
              </method>
              <method name="EnumToValue(TEnum)" attrib="22" static="true" returntype="T">
                <parameters>
                  <parameter name="enum" position="0" attrib="0" type="TEnum" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TEnum" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FastGenericComparer()" attrib="22" static="true" returntype="System.Collections.Generic.IComparer`1[T]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FastGenericEqualityComparer()" attrib="22" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FastLimitedGenericEqualityComparer(System.Int32)" attrib="22" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                <parameters>
                  <parameter name="limit" position="0" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Float32WithMeasure(System.Single)" attrib="22" static="true" returntype="System.Single">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.Single" />
                </parameters>
              </method>
              <method name="FloatWithMeasure(System.Double)" attrib="22" static="true" returntype="System.Double">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="GenericComparison(T, T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericComparisonWithComparer(System.Collections.IComparer, T, T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IComparer" />
                  <parameter name="e1" position="1" attrib="0" type="T" />
                  <parameter name="e2" position="2" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericEquality(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericEqualityER(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericEqualityWithComparer(System.Collections.IEqualityComparer, T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                  <parameter name="e1" position="1" attrib="0" type="T" />
                  <parameter name="e2" position="2" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericGreaterOrEqual(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericGreaterThan(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericHash(T)" attrib="22" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericHashWithComparer(System.Collections.IEqualityComparer, T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                  <parameter name="obj" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericLessOrEqual(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericLessThan(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericLimitedHash(System.Int32, T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="limit" position="0" attrib="0" type="System.Int32" />
                  <parameter name="obj" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericMaximum(T, T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericMinimum(T, T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericOne()" attrib="22" static="true" returntype="T">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericOneDynamic()" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericZero()" attrib="22" static="true" returntype="T">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GenericZeroDynamic()" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Int16WithMeasure(System.Int16)" attrib="22" static="true" returntype="System.Int16">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.Int16" />
                </parameters>
              </method>
              <method name="Int32WithMeasure(System.Int32)" attrib="22" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Int64WithMeasure(System.Int64)" attrib="22" static="true" returntype="System.Int64">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="MultiplyDynamic(T1, T2)" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This function is for use by dynamic invocations of F# code and should not be used directly" />
                      <property name="MessageNumber" value="1204" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ParseInt32(System.String)" attrib="22" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ParseInt64(System.String)" attrib="22" static="true" returntype="System.Int64">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ParseUInt32(System.String)" attrib="22" static="true" returntype="System.UInt32">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ParseUInt64(System.String)" attrib="22" static="true" returntype="System.UInt64">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="PhysicalEquality(T, T)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="PhysicalHash(T)" attrib="22" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="SByteWithMeasure(System.SByte)" attrib="22" static="true" returntype="System.SByte">
                <parameters>
                  <parameter name="f" position="0" attrib="0" type="System.SByte" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="ErrorStrings" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <properties>
                  <property name="AddressOpNotFirstClassString" attrib="0" ptype="System.String">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This value is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <methods>
                      <method name="get_AddressOpNotFirstClassString()" attrib="2070" static="true" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="InputArrayEmptyString" attrib="0" ptype="System.String">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This value is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <methods>
                      <method name="get_InputArrayEmptyString()" attrib="2070" static="true" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="InputMustBeNonNegativeString" attrib="0" ptype="System.String">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This value is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <methods>
                      <method name="get_InputMustBeNonNegativeString()" attrib="2070" static="true" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="InputSequenceEmptyString" attrib="0" ptype="System.String">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This value is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <methods>
                      <method name="get_InputSequenceEmptyString()" attrib="2070" static="true" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="NoNegateMinValueString" attrib="0" ptype="System.String">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This value is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <methods>
                      <method name="get_NoNegateMinValueString()" attrib="2070" static="true" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
              </class>
              <class name="HashCompare" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="FastCompareTuple2(System.Collections.IComparer, System.Tuple`2[T1,T2], System.Tuple`2[T1,T2])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`2[T1,T2]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`2[T1,T2]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastCompareTuple3(System.Collections.IComparer, System.Tuple`3[T1,T2,T3], System.Tuple`3[T1,T2,T3])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`3[T1,T2,T3]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`3[T1,T2,T3]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastCompareTuple4(System.Collections.IComparer, System.Tuple`4[T1,T2,T3,T4], System.Tuple`4[T1,T2,T3,T4])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`4[T1,T2,T3,T4]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`4[T1,T2,T3,T4]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                      <generic-parameter name="T4" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastCompareTuple5(System.Collections.IComparer, System.Tuple`5[T1,T2,T3,T4,T5], System.Tuple`5[T1,T2,T3,T4,T5])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`5[T1,T2,T3,T4,T5]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`5[T1,T2,T3,T4,T5]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                      <generic-parameter name="T4" attributes="0" />
                      <generic-parameter name="T5" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastEqualsTuple2(System.Collections.IEqualityComparer, System.Tuple`2[T1,T2], System.Tuple`2[T1,T2])" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`2[T1,T2]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`2[T1,T2]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastEqualsTuple3(System.Collections.IEqualityComparer, System.Tuple`3[T1,T2,T3], System.Tuple`3[T1,T2,T3])" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`3[T1,T2,T3]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`3[T1,T2,T3]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastEqualsTuple4(System.Collections.IEqualityComparer, System.Tuple`4[T1,T2,T3,T4], System.Tuple`4[T1,T2,T3,T4])" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`4[T1,T2,T3,T4]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`4[T1,T2,T3,T4]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                      <generic-parameter name="T4" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastEqualsTuple5(System.Collections.IEqualityComparer, System.Tuple`5[T1,T2,T3,T4,T5], System.Tuple`5[T1,T2,T3,T4,T5])" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple1" position="1" attrib="0" type="System.Tuple`5[T1,T2,T3,T4,T5]" />
                      <parameter name="tuple2" position="2" attrib="0" type="System.Tuple`5[T1,T2,T3,T4,T5]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                      <generic-parameter name="T4" attributes="0" />
                      <generic-parameter name="T5" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastHashTuple2(System.Collections.IEqualityComparer, System.Tuple`2[T1,T2])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple" position="1" attrib="0" type="System.Tuple`2[T1,T2]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastHashTuple3(System.Collections.IEqualityComparer, System.Tuple`3[T1,T2,T3])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple" position="1" attrib="0" type="System.Tuple`3[T1,T2,T3]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastHashTuple4(System.Collections.IEqualityComparer, System.Tuple`4[T1,T2,T3,T4])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple" position="1" attrib="0" type="System.Tuple`4[T1,T2,T3,T4]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                      <generic-parameter name="T4" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FastHashTuple5(System.Collections.IEqualityComparer, System.Tuple`5[T1,T2,T3,T4,T5])" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="tuple" position="1" attrib="0" type="System.Tuple`5[T1,T2,T3,T4,T5]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                      <generic-parameter name="T4" attributes="0" />
                      <generic-parameter name="T5" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericComparisonIntrinsic(T, T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericComparisonWithComparerIntrinsic(System.Collections.IComparer, T, T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comp" position="0" attrib="0" type="System.Collections.IComparer" />
                      <parameter name="x" position="1" attrib="0" type="T" />
                      <parameter name="y" position="2" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericEqualityERIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericEqualityIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericEqualityWithComparerIntrinsic(System.Collections.IEqualityComparer, T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="x" position="1" attrib="0" type="T" />
                      <parameter name="y" position="2" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericGreaterOrEqualIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericGreaterThanIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericHashIntrinsic(T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="input" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericHashWithComparerIntrinsic(System.Collections.IEqualityComparer, T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                      <parameter name="input" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericLessOrEqualIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GenericLessThanIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="LimitedGenericHashIntrinsic(System.Int32, T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="limit" position="0" attrib="0" type="System.Int32" />
                      <parameter name="input" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="PhysicalEqualityIntrinsic(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="4" />
                    </generic-parameters>
                  </method>
                  <method name="PhysicalHashIntrinsic(T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is a primitive library routine used by optimized F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="input" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="4" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
              <class name="IntrinsicFunctions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="CheckThis(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="4" />
                    </generic-parameters>
                  </method>
                  <method name="CreateInstance()" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters />
                    <generic-parameters>
                      <generic-parameter name="T" attributes="16" />
                    </generic-parameters>
                  </method>
                  <method name="Dispose(T)" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="resource" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0">
                        <generic-parameter-constraints>
                          <generic-parameter-constraint name="System.IDisposable" />
                        </generic-parameter-constraints>
                      </generic-parameter>
                    </generic-parameters>
                  </method>
                  <method name="FailInit()" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters />
                  </method>
                  <method name="FailStaticInit()" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters />
                  </method>
                  <method name="GetArray(T[], System.Int32)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[]" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArray2D(T[0...,0...], System.Int32, System.Int32)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArray3D(T[0...,0...,0...], System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                      <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArray4D(T[0...,0...,0...,0...], System.Int32, System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                      <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                      <parameter name="index4" position="4" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetString(System.String, System.Int32)" attrib="22" static="true" returntype="System.Char">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.String" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="MakeDecimal(System.Int32, System.Int32, System.Int32, System.Boolean, System.Byte)" attrib="22" static="true" returntype="System.Decimal">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="low" position="0" attrib="0" type="System.Int32" />
                      <parameter name="medium" position="1" attrib="0" type="System.Int32" />
                      <parameter name="high" position="2" attrib="0" type="System.Int32" />
                      <parameter name="isNegative" position="3" attrib="0" type="System.Boolean" />
                      <parameter name="scale" position="4" attrib="0" type="System.Byte" />
                    </parameters>
                  </method>
                  <method name="SetArray(T[], System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[]" />
                      <parameter name="index" position="1" attrib="0" type="System.Int32" />
                      <parameter name="value" position="2" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArray2D(T[0...,0...], System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                      <parameter name="value" position="3" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArray3D(T[0...,0...,0...], System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                      <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                      <parameter name="value" position="4" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArray4D(T[0...,0...,0...,0...], System.Int32, System.Int32, System.Int32, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="index2" position="2" attrib="0" type="System.Int32" />
                      <parameter name="index3" position="3" attrib="0" type="System.Int32" />
                      <parameter name="index4" position="4" attrib="0" type="System.Int32" />
                      <parameter name="value" position="5" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="TypeTestFast(System.Object)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.Object" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="TypeTestGeneric(System.Object)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.Object" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="UnboxFast(System.Object)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.Object" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="UnboxGeneric(System.Object)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.Object" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
              <class name="IntrinsicOperators" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="Or(System.Boolean, System.Boolean)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="or" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="In F# code, use 'e1 || e2' instead of 'e1 or e2'" />
                          <property name="MessageNumber" value="1203" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="e1" position="0" attrib="0" type="System.Boolean" />
                      <parameter name="e2" position="1" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                  <method name="op_AddressOf(T)" attrib="2070" static="true" returntype="T&amp;">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="obj" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="op_Amp(System.Boolean, System.Boolean)" attrib="2070" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="In F# code, use 'e1 &amp;&amp; e2' instead of 'e1 &amp; e2'" />
                          <property name="MessageNumber" value="1203" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="e1" position="0" attrib="0" type="System.Boolean" />
                      <parameter name="e2" position="1" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                  <method name="op_BooleanAnd(System.Boolean, System.Boolean)" attrib="2070" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="e1" position="0" attrib="0" type="System.Boolean" />
                      <parameter name="e2" position="1" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                  <method name="op_BooleanOr(System.Boolean, System.Boolean)" attrib="2070" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="e1" position="0" attrib="0" type="System.Boolean" />
                      <parameter name="e2" position="1" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                  <method name="op_IntegerAddressOf(T)" attrib="2070" static="true" returntype="System.IntPtr">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="obj" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="LiteralAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Field" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="MatchFailureException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.IStructuralEquatable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6148">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32, System.Int32)" attrib="6150">
                <parameters>
                  <parameter name="data0" position="0" attrib="0" type="System.String" />
                  <parameter name="data1" position="1" attrib="0" type="System.Int32" />
                  <parameter name="data2" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Data0" attrib="0" ptype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_Data0()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Data1" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_Data1()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Data2" attrib="0" ptype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="get_Data2()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="198" virtual="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comp" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="198" virtual="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                </attributes>
                <parameters>
                  <parameter name="comp" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MeasureAnnotatedAbbreviationAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="MeasureAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="GenericParameter, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NoComparisonAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Delegate, Interface, Enum, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NoDynamicInvocationAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Property, Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NoEqualityAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Delegate, Interface, Enum, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NumericLiterals" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <classes>
              <class name="NumericLiteralI" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="FromInt32(System.Int32)" attrib="22" static="true" returntype="T">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FromInt64(System.Int64)" attrib="22" static="true" returntype="T">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FromInt64Dynamic(System.Int64)" attrib="22" static="true" returntype="System.Object">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                  <method name="FromOne()" attrib="22" static="true" returntype="T">
                    <parameters />
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FromString(System.String)" attrib="22" static="true" returntype="T">
                    <parameters>
                      <parameter name="text" position="0" attrib="0" type="System.String" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FromStringDynamic(System.String)" attrib="22" static="true" returntype="System.Object">
                    <parameters>
                      <parameter name="text" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                  <method name="FromZero()" attrib="22" static="true" returntype="T">
                    <parameters />
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="Operators" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <properties>
              <property name="Infinity" attrib="0" ptype="System.Double">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                    <properties>
                      <property name="CompiledName" value="Infinity" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Infinity()" attrib="2070" static="true" returntype="System.Double">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InfinitySingle" attrib="0" ptype="System.Single">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                    <properties>
                      <property name="CompiledName" value="InfinitySingle" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_InfinitySingle()" attrib="2070" static="true" returntype="System.Single">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NaN" attrib="0" ptype="System.Double">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                    <properties>
                      <property name="CompiledName" value="NaN" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_NaN()" attrib="2070" static="true" returntype="System.Double">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NaNSingle" attrib="0" ptype="System.Single">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                    <properties>
                      <property name="CompiledName" value="NaNSingle" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_NaNSingle()" attrib="2070" static="true" returntype="System.Single">
                    <attributes>
                      <attribute name="System.Diagnostics.DebuggerNonUserCodeAttribute" />
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abs(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="abs" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Acos(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="acos" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Asin(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="asin" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Atan(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="atan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Atan2(T1, T1)" attrib="22" static="true" returntype="T2">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="atan2" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="y" position="0" attrib="0" type="T1" />
                  <parameter name="x" position="1" attrib="0" type="T1" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Box(T)" attrib="22" static="true" returntype="System.Object">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="box" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Ceiling(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ceil" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Compare(T, T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="compare" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ConsoleError()" attrib="22" static="true" returntype="System.IO.TextWriter">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="stderr" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ConsoleIn()" attrib="22" static="true" returntype="System.IO.TextReader">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="stdin" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ConsoleOut()" attrib="22" static="true" returntype="System.IO.TextWriter">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="stdout" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cos(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="cos" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cosh(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="cosh" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="CreateSequence(System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="seq" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="sequence" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Decrement(Microsoft.FSharp.Core.FSharpRef`1[System.Int32])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="decr" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="cell" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpRef`1[System.Int32]" />
                </parameters>
              </method>
              <method name="DefaultArg(Microsoft.FSharp.Core.FSharpOption`1[T], T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="defaultArg" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                  <parameter name="defaultValue" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exit(System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exit" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="exitcode" position="0" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exp(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exp" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FailWith(System.String)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="failwith" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Failure(System.String)" attrib="22" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="FailurePattern(System.Exception)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.String]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Failure|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="error" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </method>
              <method name="Floor(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="floor" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fst(System.Tuple`2[T1,T2])" attrib="22" static="true" returntype="T1">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fst" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="tuple" position="0" attrib="0" type="System.Tuple`2[T1,T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Hash(T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="hash" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Identity(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="id" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Ignore(T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ignore" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Increment(Microsoft.FSharp.Core.FSharpRef`1[System.Int32])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="incr" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="cell" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpRef`1[System.Int32]" />
                </parameters>
              </method>
              <method name="InvalidArg(System.String, System.String)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="invalidArg" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="argumentName" position="0" attrib="0" type="System.String" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InvalidOp(System.String)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="invalidOp" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="KeyValuePattern(System.Collections.Generic.KeyValuePair`2[TKey,TValue])" attrib="22" static="true" returntype="System.Tuple`2[TKey,TValue]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|KeyValue|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="keyValuePair" position="0" attrib="0" type="System.Collections.Generic.KeyValuePair`2[TKey,TValue]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lock(TLock, Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="lock" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="lockObject" position="0" attrib="0" type="TLock" />
                  <parameter name="action" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TLock" attributes="4" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Log(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="log" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Log10(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="log10" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(T, T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="max" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(T, T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="min" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="e1" position="0" attrib="0" type="T" />
                  <parameter name="e2" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Not(System.Boolean)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="not" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="NullArg(System.String)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="nullArg" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="argumentName" position="0" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PowInteger(T, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="pown" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="n" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Raise(System.Exception)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="raise" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="exn" position="0" attrib="0" type="System.Exception" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Ref(T)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpRef`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ref" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reraise()" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="reraise" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Rethrow()" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="rethrow" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="This function has been renamed to 'reraise'. Please adjust your code to reflect this" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Round(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="round" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sign(T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sign" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sin(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sin" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sinh(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sinh" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SizeOf()" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sizeof" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Snd(System.Tuple`2[T1,T2])" attrib="22" static="true" returntype="T2">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="snd" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="tuple" position="0" attrib="0" type="System.Tuple`2[T1,T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sqrt(T)" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sqrt" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Tan(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tan" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Tanh(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="tanh" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToByte(T)" attrib="22" static="true" returntype="System.Byte">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="byte" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToChar(T)" attrib="22" static="true" returntype="System.Char">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="char" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDecimal(T)" attrib="22" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="decimal" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDouble(T)" attrib="22" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="float" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToEnum(System.Int32)" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="enum" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToInt(T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToInt16(T)" attrib="22" static="true" returntype="System.Int16">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int16" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToInt32(T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int32" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToInt64(T)" attrib="22" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int64" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToIntPtr(T)" attrib="22" static="true" returntype="System.IntPtr">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="nativeint" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSByte(T)" attrib="22" static="true" returntype="System.SByte">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sbyte" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToSingle(T)" attrib="22" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="float32" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToString(T)" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="string" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToUInt16(T)" attrib="22" static="true" returntype="System.UInt16">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint16" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToUInt32(T)" attrib="22" static="true" returntype="System.UInt32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint32" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToUInt64(T)" attrib="22" static="true" returntype="System.UInt64">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint64" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToUIntPtr(T)" attrib="22" static="true" returntype="System.UIntPtr">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unativeint" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Truncate(T)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="truncate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TypeDefOf()" attrib="22" static="true" returntype="System.Type">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="typedefof" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TypeOf()" attrib="22" static="true" returntype="System.Type">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="typeof" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute" />
                </attributes>
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Unbox(System.Object)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unbox" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(T, Microsoft.FSharp.Core.FSharpFunc`2[T,TResult])" attrib="22" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="using" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="resource" position="0" attrib="0" type="T" />
                  <parameter name="action" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.IDisposable" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="limitedHash(System.Int32, T)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="limit" position="0" attrib="0" type="System.Int32" />
                  <parameter name="obj" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Addition(T1, T2)" attrib="2070" static="true" returntype="T3">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Append(Microsoft.FSharp.Collections.FSharpList`1[T], Microsoft.FSharp.Collections.FSharpList`1[T])" attrib="2070" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="list1" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                  <parameter name="list2" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_BitwiseAnd(T, T)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_BitwiseOr(T, T)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_ColonEquals(Microsoft.FSharp.Core.FSharpRef`1[T], T)" attrib="2070" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="cell" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpRef`1[T]" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_ComposeLeft(Microsoft.FSharp.Core.FSharpFunc`2[T2,T3], Microsoft.FSharp.Core.FSharpFunc`2[T1,T2])" attrib="2070" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T1,T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="func2" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T2,T3]" />
                  <parameter name="func1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T1" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_ComposeRight(Microsoft.FSharp.Core.FSharpFunc`2[T1,T2], Microsoft.FSharp.Core.FSharpFunc`2[T2,T3])" attrib="2070" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T1,T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="func1" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,T2]" />
                  <parameter name="func2" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T2,T3]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Concatenate(System.String, System.String)" attrib="2070" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                    <properties>
                      <property name="IsHidden" value="True" />
                      <property name="Message" value="This construct is for ML compatibility. Consider using the '+' operator instead. This may require a type annotation to indicate it acts on strings. This message can be disabled using '--nowarn:62' or '#nowarn &quot;62&quot;'." />
                      <property name="MessageNumber" value="62" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="s1" position="0" attrib="0" type="System.String" />
                  <parameter name="s2" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="op_Dereference(Microsoft.FSharp.Core.FSharpRef`1[T])" attrib="2070" static="true" returntype="T">
                <parameters>
                  <parameter name="cell" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpRef`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Division(T1, T2)" attrib="2070" static="true" returntype="T3">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Equality(T, T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_ExclusiveOr(T, T)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Exponentiation(T, TResult)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="TResult" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_GreaterThan(T, T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_GreaterThanOrEqual(T, T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Inequality(T, T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_LeftShift(T, System.Int32)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                  <parameter name="shift" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_LessThan(T, T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_LessThanOrEqual(T, T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_LogicalNot(T)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Modulus(T1, T2)" attrib="2070" static="true" returntype="T3">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Multiply(T1, T2)" attrib="2070" static="true" returntype="T3">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_PipeLeft(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], T)" attrib="2070" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="arg1" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_PipeLeft2(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]], T1, T2)" attrib="2070" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" />
                  <parameter name="arg1" position="1" attrib="0" type="T1" />
                  <parameter name="arg2" position="2" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_PipeLeft3(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]], T1, T2, T3)" attrib="2070" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]]" />
                  <parameter name="arg1" position="1" attrib="0" type="T1" />
                  <parameter name="arg2" position="2" attrib="0" type="T2" />
                  <parameter name="arg3" position="3" attrib="0" type="T3" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_PipeRight(T1, Microsoft.FSharp.Core.FSharpFunc`2[T1,TResult])" attrib="2070" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="T1" />
                  <parameter name="func" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_PipeRight2(T1, T2, Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]])" attrib="2070" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="func" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_PipeRight3(T1, T2, T3, Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]])" attrib="2070" static="true" returntype="TResult">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="func" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Range(T, T)" attrib="2070" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="start" position="0" attrib="0" type="T" />
                  <parameter name="finish" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_RangeStep(T, TStep, T)" attrib="2070" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="start" position="0" attrib="0" type="T" />
                  <parameter name="step" position="1" attrib="0" type="TStep" />
                  <parameter name="finish" position="2" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TStep" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_RightShift(T, System.Int32)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                  <parameter name="shift" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_Subtraction(T1, T2)" attrib="2070" static="true" returntype="T3">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_UnaryNegation(T)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="n" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="op_UnaryPlus(T)" attrib="2070" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
            <classes>
              <class name="Checked" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="ToByte(T)" attrib="22" static="true" returntype="System.Byte">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="byte" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToChar(T)" attrib="22" static="true" returntype="System.Char">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="char" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToInt(T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="int" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToInt16(T)" attrib="22" static="true" returntype="System.Int16">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="int16" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToInt32(T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="int32" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToInt64(T)" attrib="22" static="true" returntype="System.Int64">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="int64" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToIntPtr(T)" attrib="22" static="true" returntype="System.IntPtr">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="nativeint" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToSByte(T)" attrib="22" static="true" returntype="System.SByte">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="sbyte" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToUInt16(T)" attrib="22" static="true" returntype="System.UInt16">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="uint16" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToUInt32(T)" attrib="22" static="true" returntype="System.UInt32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="uint32" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToUInt64(T)" attrib="22" static="true" returntype="System.UInt64">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="uint64" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ToUIntPtr(T)" attrib="22" static="true" returntype="System.UIntPtr">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="unativeint" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="op_Addition(T1, T2)" attrib="2070" static="true" returntype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T1" />
                      <parameter name="y" position="1" attrib="0" type="T2" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="op_Multiply(T1, T2)" attrib="2070" static="true" returntype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T1" />
                      <parameter name="y" position="1" attrib="0" type="T2" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="op_Subtraction(T1, T2)" attrib="2070" static="true" returntype="T3">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T1" />
                      <parameter name="y" position="1" attrib="0" type="T2" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                      <generic-parameter name="T3" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="op_UnaryNegation(T)" attrib="2070" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
              <class name="OperatorIntrinsics" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="AbsDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="AcosDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="AsinDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Atan2Dynamic(T1, T1)" attrib="22" static="true" returntype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="y" position="0" attrib="0" type="T1" />
                      <parameter name="x" position="1" attrib="0" type="T1" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="AtanDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="CeilingDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="CosDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="CoshDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="ExpDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="FloorDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArraySlice(T[], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="T[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[]" />
                      <parameter name="start" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArraySlice2D(T[0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="T[0...,0...]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArraySlice2DFixed1(T[0...,0...], System.Int32, Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="T[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="start2" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArraySlice2DFixed2(T[0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], System.Int32)" attrib="22" static="true" returntype="T[]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="index2" position="3" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArraySlice3D(T[0...,0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="T[0...,0...,0...]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start3" position="5" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish3" position="6" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetArraySlice4D(T[0...,0...,0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="T[0...,0...,0...,0...]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start3" position="5" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish3" position="6" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start4" position="7" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish4" position="8" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="GetStringSlice(System.String, Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32])" attrib="22" static="true" returntype="System.String">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="source" position="0" attrib="0" type="System.String" />
                      <parameter name="start" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                    </parameters>
                  </method>
                  <method name="Log10Dynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="LogDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="PowByte(System.Byte, System.Int32)" attrib="22" static="true" returntype="System.Byte">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Byte" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowDecimal(System.Decimal, System.Int32)" attrib="22" static="true" returntype="System.Decimal">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Decimal" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowDouble(System.Double, System.Int32)" attrib="22" static="true" returntype="System.Double">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Double" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowDynamic(T, TResult)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="TResult" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                      <generic-parameter name="TResult" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="PowGeneric(T, Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], T, System.Int32)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="one" position="0" attrib="0" type="T" />
                      <parameter name="mul" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                      <parameter name="value" position="2" attrib="0" type="T" />
                      <parameter name="exponent" position="3" attrib="0" type="System.Int32" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="PowInt16(System.Int16, System.Int32)" attrib="22" static="true" returntype="System.Int16">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Int16" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowInt32(System.Int32, System.Int32)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Int32" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowInt64(System.Int64, System.Int32)" attrib="22" static="true" returntype="System.Int64">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Int64" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowIntPtr(System.IntPtr, System.Int32)" attrib="22" static="true" returntype="System.IntPtr">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.IntPtr" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowSByte(System.SByte, System.Int32)" attrib="22" static="true" returntype="System.SByte">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.SByte" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowSingle(System.Single, System.Int32)" attrib="22" static="true" returntype="System.Single">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.Single" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowUInt16(System.UInt16, System.Int32)" attrib="22" static="true" returntype="System.UInt16">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.UInt16" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowUInt32(System.UInt32, System.Int32)" attrib="22" static="true" returntype="System.UInt32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.UInt32" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowUInt64(System.UInt64, System.Int32)" attrib="22" static="true" returntype="System.UInt64">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.UInt64" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="PowUIntPtr(System.UIntPtr, System.Int32)" attrib="22" static="true" returntype="System.UIntPtr">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="System.UIntPtr" />
                      <parameter name="n" position="1" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="RangeByte(System.Byte, System.Byte, System.Byte)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Byte]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Byte" />
                      <parameter name="step" position="1" attrib="0" type="System.Byte" />
                      <parameter name="stop" position="2" attrib="0" type="System.Byte" />
                    </parameters>
                  </method>
                  <method name="RangeChar(System.Char, System.Char)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Char]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Char" />
                      <parameter name="stop" position="1" attrib="0" type="System.Char" />
                    </parameters>
                  </method>
                  <method name="RangeDouble(System.Double, System.Double, System.Double)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Double]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Double" />
                      <parameter name="step" position="1" attrib="0" type="System.Double" />
                      <parameter name="stop" position="2" attrib="0" type="System.Double" />
                    </parameters>
                  </method>
                  <method name="RangeGeneric(T, Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]], T, T)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="one" position="0" attrib="0" type="T" />
                      <parameter name="add" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[T,T]]" />
                      <parameter name="start" position="2" attrib="0" type="T" />
                      <parameter name="stop" position="3" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="RangeInt16(System.Int16, System.Int16, System.Int16)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Int16]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Int16" />
                      <parameter name="step" position="1" attrib="0" type="System.Int16" />
                      <parameter name="stop" position="2" attrib="0" type="System.Int16" />
                    </parameters>
                  </method>
                  <method name="RangeInt32(System.Int32, System.Int32, System.Int32)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Int32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Int32" />
                      <parameter name="step" position="1" attrib="0" type="System.Int32" />
                      <parameter name="stop" position="2" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="RangeInt64(System.Int64, System.Int64, System.Int64)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Int64]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Int64" />
                      <parameter name="step" position="1" attrib="0" type="System.Int64" />
                      <parameter name="stop" position="2" attrib="0" type="System.Int64" />
                    </parameters>
                  </method>
                  <method name="RangeIntPtr(System.IntPtr, System.IntPtr, System.IntPtr)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.IntPtr]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.IntPtr" />
                      <parameter name="step" position="1" attrib="0" type="System.IntPtr" />
                      <parameter name="stop" position="2" attrib="0" type="System.IntPtr" />
                    </parameters>
                  </method>
                  <method name="RangeSByte(System.SByte, System.SByte, System.SByte)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.SByte]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.SByte" />
                      <parameter name="step" position="1" attrib="0" type="System.SByte" />
                      <parameter name="stop" position="2" attrib="0" type="System.SByte" />
                    </parameters>
                  </method>
                  <method name="RangeSingle(System.Single, System.Single, System.Single)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Single]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.Single" />
                      <parameter name="step" position="1" attrib="0" type="System.Single" />
                      <parameter name="stop" position="2" attrib="0" type="System.Single" />
                    </parameters>
                  </method>
                  <method name="RangeStepGeneric(TStep, Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TStep,T]], T, TStep, T)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="zero" position="0" attrib="0" type="TStep" />
                      <parameter name="add" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TStep,T]]" />
                      <parameter name="start" position="2" attrib="0" type="T" />
                      <parameter name="step" position="3" attrib="0" type="TStep" />
                      <parameter name="stop" position="4" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="TStep" attributes="0" />
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="RangeUInt16(System.UInt16, System.UInt16, System.UInt16)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.UInt16]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.UInt16" />
                      <parameter name="step" position="1" attrib="0" type="System.UInt16" />
                      <parameter name="stop" position="2" attrib="0" type="System.UInt16" />
                    </parameters>
                  </method>
                  <method name="RangeUInt32(System.UInt32, System.UInt32, System.UInt32)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.UInt32]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.UInt32" />
                      <parameter name="step" position="1" attrib="0" type="System.UInt32" />
                      <parameter name="stop" position="2" attrib="0" type="System.UInt32" />
                    </parameters>
                  </method>
                  <method name="RangeUInt64(System.UInt64, System.UInt64, System.UInt64)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.UInt64]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.UInt64" />
                      <parameter name="step" position="1" attrib="0" type="System.UInt64" />
                      <parameter name="stop" position="2" attrib="0" type="System.UInt64" />
                    </parameters>
                  </method>
                  <method name="RangeUIntPtr(System.UIntPtr, System.UIntPtr, System.UIntPtr)" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.UIntPtr]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="start" position="0" attrib="0" type="System.UIntPtr" />
                      <parameter name="step" position="1" attrib="0" type="System.UIntPtr" />
                      <parameter name="stop" position="2" attrib="0" type="System.UIntPtr" />
                    </parameters>
                  </method>
                  <method name="RoundDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArraySlice(T[], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], T[])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[]" />
                      <parameter name="start" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="source" position="3" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArraySlice2D(T[0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], T[0...,0...])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="source" position="5" attrib="0" type="T[0...,0...]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArraySlice2DFixed1(T[0...,0...], System.Int32, Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], T[])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="index1" position="1" attrib="0" type="System.Int32" />
                      <parameter name="start2" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="source" position="4" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArraySlice2DFixed2(T[0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], System.Int32, T[])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="index2" position="3" attrib="0" type="System.Int32" />
                      <parameter name="source" position="4" attrib="0" type="T[]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArraySlice3D(T[0...,0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], T[0...,0...,0...])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start3" position="5" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish3" position="6" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="source" position="7" attrib="0" type="T[0...,0...,0...]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SetArraySlice4D(T[0...,0...,0...,0...], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], Microsoft.FSharp.Core.FSharpOption`1[System.Int32], T[0...,0...,0...,0...])" attrib="22" static="true" returntype="System.Void">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="target" position="0" attrib="0" type="T[0...,0...,0...,0...]" />
                      <parameter name="start1" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish1" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start2" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish2" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start3" position="5" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish3" position="6" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="start4" position="7" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="finish4" position="8" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]" />
                      <parameter name="source" position="9" attrib="0" type="T[0...,0...,0...,0...]" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SignDynamic(T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SinDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SinhDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="SqrtDynamic(T1)" attrib="22" static="true" returntype="T2">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T1" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T1" attributes="0" />
                      <generic-parameter name="T2" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="TanDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="TanhDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="TruncateDynamic(T)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilerMessageAttribute">
                        <properties>
                          <property name="IsHidden" value="True" />
                          <property name="Message" value="This function is for use by compiled F# code and should not be used directly" />
                          <property name="MessageNumber" value="1204" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
              <class name="Unchecked" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <methods>
                  <method name="Compare(T, T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="compare" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="DefaultOf()" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="defaultof" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute" />
                    </attributes>
                    <parameters />
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Equals(T, T)" attrib="22" static="true" returntype="System.Boolean">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                        <properties>
                          <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                        </properties>
                      </attribute>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="equals" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                      <parameter name="y" position="1" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Hash(T)" attrib="22" static="true" returntype="System.Int32">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="hash" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="x" position="0" attrib="0" type="T" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                  <method name="Unbox(System.Object)" attrib="22" static="true" returntype="T">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                        <properties>
                          <property name="SourceName" value="unbox" />
                        </properties>
                      </attribute>
                    </attributes>
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Object" />
                    </parameters>
                    <generic-parameters>
                      <generic-parameter name="T" attributes="0" />
                    </generic-parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="OptimizedClosures" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <classes>
              <class name="FSharpFunc`3" type="class" base="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" abstract="true" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
                <constructors>
                  <constructor name=".ctor()" attrib="6148">
                    <parameters />
                  </constructor>
                </constructors>
                <methods>
                  <method name="Adapt(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.OptimizedClosures+FSharpFunc`3[T1,T2,TResult]">
                    <parameters>
                      <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]]" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1)" attrib="198" virtual="true" is-override="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T2,TResult]">
                    <parameters>
                      <parameter name="t" position="0" attrib="0" type="T1" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1, T2)" attrib="1222" abstract="true" virtual="true" returntype="TResult">
                    <parameters>
                      <parameter name="arg1" position="0" attrib="0" type="T1" />
                      <parameter name="arg2" position="1" attrib="0" type="T2" />
                    </parameters>
                  </method>
                </methods>
              </class>
              <class name="FSharpFunc`4" type="class" base="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]]" abstract="true" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
                <constructors>
                  <constructor name=".ctor()" attrib="6148">
                    <parameters />
                  </constructor>
                </constructors>
                <methods>
                  <method name="Adapt(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.OptimizedClosures+FSharpFunc`4[T1,T2,T3,TResult]">
                    <parameters>
                      <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]]" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1)" attrib="198" virtual="true" is-override="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,TResult]]">
                    <parameters>
                      <parameter name="t" position="0" attrib="0" type="T1" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1, T2, T3)" attrib="1222" abstract="true" virtual="true" returntype="TResult">
                    <parameters>
                      <parameter name="arg1" position="0" attrib="0" type="T1" />
                      <parameter name="arg2" position="1" attrib="0" type="T2" />
                      <parameter name="arg3" position="2" attrib="0" type="T3" />
                    </parameters>
                  </method>
                </methods>
              </class>
              <class name="FSharpFunc`5" type="class" base="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,TResult]]]]" abstract="true" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
                <constructors>
                  <constructor name=".ctor()" attrib="6148">
                    <parameters />
                  </constructor>
                </constructors>
                <methods>
                  <method name="Adapt(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,TResult]]]])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.OptimizedClosures+FSharpFunc`5[T1,T2,T3,T4,TResult]">
                    <parameters>
                      <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,TResult]]]]" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1)" attrib="198" virtual="true" is-override="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,TResult]]]">
                    <parameters>
                      <parameter name="t" position="0" attrib="0" type="T1" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1, T2, T3, T4)" attrib="1222" abstract="true" virtual="true" returntype="TResult">
                    <parameters>
                      <parameter name="arg1" position="0" attrib="0" type="T1" />
                      <parameter name="arg2" position="1" attrib="0" type="T2" />
                      <parameter name="arg3" position="2" attrib="0" type="T3" />
                      <parameter name="arg4" position="3" attrib="0" type="T4" />
                    </parameters>
                  </method>
                </methods>
              </class>
              <class name="FSharpFunc`6" type="class" base="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,Microsoft.FSharp.Core.FSharpFunc`2[T5,TResult]]]]]" abstract="true" serializable="true" charset="Ansi" layout="Auto">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
                  <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
                </attributes>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="0" />
                  <generic-parameter name="T4" attributes="0" />
                  <generic-parameter name="T5" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
                <constructors>
                  <constructor name=".ctor()" attrib="6148">
                    <parameters />
                  </constructor>
                </constructors>
                <methods>
                  <method name="Adapt(Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,Microsoft.FSharp.Core.FSharpFunc`2[T5,TResult]]]]])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.OptimizedClosures+FSharpFunc`6[T1,T2,T3,T4,T5,TResult]">
                    <parameters>
                      <parameter name="func" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T1,Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,Microsoft.FSharp.Core.FSharpFunc`2[T5,TResult]]]]]" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1)" attrib="198" virtual="true" is-override="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[T2,Microsoft.FSharp.Core.FSharpFunc`2[T3,Microsoft.FSharp.Core.FSharpFunc`2[T4,Microsoft.FSharp.Core.FSharpFunc`2[T5,TResult]]]]">
                    <parameters>
                      <parameter name="t" position="0" attrib="0" type="T1" />
                    </parameters>
                  </method>
                  <method name="Invoke(T1, T2, T3, T4, T5)" attrib="1222" abstract="true" virtual="true" returntype="TResult">
                    <parameters>
                      <parameter name="arg1" position="0" attrib="0" type="T1" />
                      <parameter name="arg2" position="1" attrib="0" type="T2" />
                      <parameter name="arg3" position="2" attrib="0" type="T3" />
                      <parameter name="arg4" position="3" attrib="0" type="T4" />
                      <parameter name="arg5" position="4" attrib="0" type="T5" />
                    </parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="OptionModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="Bind(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]], Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="bind" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpOption`1[TResult]]" />
                  <parameter name="option" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="count" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="option" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="option" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Fold(Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]], TState, Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fold" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TState,Microsoft.FSharp.Core.FSharpFunc`2[T,TState]]" />
                  <parameter name="state" position="1" attrib="0" type="TState" />
                  <parameter name="option" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FoldBack(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]], Microsoft.FSharp.Core.FSharpOption`1[T], TState)" attrib="22" static="true" returntype="TState">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="foldBack" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="folder" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.FSharpFunc`2[TState,TState]]" />
                  <parameter name="option" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                  <parameter name="state" position="2" attrib="0" type="TState" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TState" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="option" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GetValue(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="get" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="option" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsNone(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isNone" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="option" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IsSome(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="isSome" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="option" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="option" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[T,TResult], Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                  <parameter name="option" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="T[]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toArray" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="option" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(Microsoft.FSharp.Core.FSharpOption`1[T])" attrib="22" static="true" returntype="Microsoft.FSharp.Collections.FSharpList`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toList" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="option" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="OptionalArgumentAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Parameter" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="PrintfFormat`4" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="TPrinter" attributes="0" />
              <generic-parameter name="TState" attributes="0" />
              <generic-parameter name="TResidue" attributes="0" />
              <generic-parameter name="TResult" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="PrintfFormat`5" type="class" base="Microsoft.FSharp.Core.PrintfFormat`4[TPrinter,TState,TResidue,TResult]" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="TPrinter" attributes="0" />
              <generic-parameter name="TState" attributes="0" />
              <generic-parameter name="TResidue" attributes="0" />
              <generic-parameter name="TResult" attributes="0" />
              <generic-parameter name="TTuple" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="PrintfModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="PrintFormat(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="printf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatLine(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="printfn" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatLineToError(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="eprintfn" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatLineToTextWriter(System.IO.TextWriter, Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fprintfn" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="textWriter" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatThen(Microsoft.FSharp.Core.FSharpFunc`2[System.String,TResult], Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="kprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="continutation" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.String,TResult]" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToError(Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="eprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToStringBuilder(System.Text.StringBuilder, Microsoft.FSharp.Core.PrintfFormat`4[T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="bprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="builder" position="0" attrib="0" type="System.Text.StringBuilder" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToStringBuilderThen(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,TResult], System.Text.StringBuilder, Microsoft.FSharp.Core.PrintfFormat`4[T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,TResult])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="kbprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="continutation" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,TResult]" />
                  <parameter name="builder" position="1" attrib="0" type="System.Text.StringBuilder" />
                  <parameter name="format" position="2" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToStringThen(Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,System.String])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,System.String]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToStringThen(Microsoft.FSharp.Core.FSharpFunc`2[System.String,TResult], Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ksprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="continutation" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.String,TResult]" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToStringThenFail(Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="failwithf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="format" position="0" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,Microsoft.FSharp.Core.Unit,System.String,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToTextWriter(System.IO.TextWriter, Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="fprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="textWriter" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="format" position="1" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="PrintFormatToTextWriterThen(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,TResult], System.IO.TextWriter, Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,TResult])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="kfprintf" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="continutation" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,TResult]" />
                  <parameter name="textWriter" position="1" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="format" position="2" attrib="0" type="Microsoft.FSharp.Core.PrintfFormat`4[T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ProjectionParameterAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Parameter" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ReferenceEqualityAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ReflectedDefinitionAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Property, Method, Constructor, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="RequireQualifiedAccessAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="RequiresExplicitTypeArgumentsAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="SealedAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean)" attrib="6150">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SourceConstructFlags" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Closure" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="6" />
              <field name="Exception" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="5" />
              <field name="Field" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="4" />
              <field name="KindMask" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="31" />
              <field name="Module" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="7" />
              <field name="NonPublicRepresentation" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="32" />
              <field name="None" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="0" />
              <field name="ObjectType" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="3" />
              <field name="RecordType" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="2" />
              <field name="SumType" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="1" />
              <field name="UnionCase" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="8" />
              <field name="Value" attrib="32854" fieldtype="Microsoft.FSharp.Core.SourceConstructFlags" value="9" />
            </fields>
          </class>
          <class name="StringModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="Collect(Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.String], System.String)" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="collect" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.String]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Concat(System.String, System.Collections.Generic.IEnumerable`1[System.String])" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="concat" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="sep" position="0" attrib="0" type="System.String" />
                  <parameter name="strings" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.String]" />
                </parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Boolean], System.String)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Boolean]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ForAll(Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Boolean], System.String)" attrib="22" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="forall" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Boolean]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Initialize(System.Int32, Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,System.String])" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="init" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="initializer" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,System.String]" />
                </parameters>
              </method>
              <method name="Iterate(Microsoft.FSharp.Core.FSharpFunc`2[System.Char,Microsoft.FSharp.Core.Unit], System.String)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iter" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Char,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Char,Microsoft.FSharp.Core.Unit]], System.String)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="iteri" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Char,Microsoft.FSharp.Core.Unit]]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Length(System.String)" attrib="22" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="length" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="str" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Map(Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Char], System.String)" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="map" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Char]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Char]], System.String)" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="mapi" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="mapping" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Int32,Microsoft.FSharp.Core.FSharpFunc`2[System.Char,System.Char]]" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Replicate(System.Int32, System.String)" attrib="22" static="true" returntype="System.String">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="replicate" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="str" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StructAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Struct" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="StructuralComparisonAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="StructuralEqualityAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="StructuredFormatDisplayAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Delegate, Interface, Enum, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Value" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="Unit" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
            </interfaces>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="UnverifiableAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Property, Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="VolatileFieldAttribute" type="class" base="System.Attribute" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Field" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Core.CompilerServices">
        <classes>
          <class name="GeneratedSequenceBase`1" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IEnumerator`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IEnumerator" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6148">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CheckClose" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CheckClose()" attrib="3270" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LastGenerated" attrib="0" ptype="T">
                <methods>
                  <method name="get_LastGenerated()" attrib="3270" abstract="true" virtual="true" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="1222" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GenerateNext(System.Collections.Generic.IEnumerable`1[T]&amp;)" attrib="1222" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" direction="ref" />
                </parameters>
              </method>
              <method name="GetFreshEnumerator()" attrib="1222" abstract="true" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[T]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IProvidedNamespace" type="interface" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <properties>
              <property name="NamespaceName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_NamespaceName()" attrib="3270" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetNestedNamespaces()" attrib="1222" abstract="true" virtual="true" returntype="Microsoft.FSharp.Core.CompilerServices.IProvidedNamespace[]">
                <parameters />
              </method>
              <method name="GetTypes()" attrib="1222" abstract="true" virtual="true" returntype="System.Type[]">
                <parameters />
              </method>
              <method name="ResolveTypeName(System.String)" attrib="1222" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITypeProvider" type="interface" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <events>
              <event name="Invalidate" attrib="0" eventtype="System.EventHandler">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CLIEventAttribute" />
                </attributes>
              </event>
            </events>
            <methods>
              <method name="ApplyStaticArguments(System.Type, System.String[], System.Object[])" attrib="1222" abstract="true" virtual="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeWithoutArguments" position="0" attrib="0" type="System.Type" />
                  <parameter name="typePathWithArguments" position="1" attrib="0" type="System.String[]" />
                  <parameter name="staticArguments" position="2" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="GetGeneratedAssemblyContents(System.Reflection.Assembly)" attrib="1222" abstract="true" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="GetInvokerExpression(System.Reflection.MethodBase, Microsoft.FSharp.Quotations.FSharpExpr[])" attrib="1222" abstract="true" virtual="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="syntheticMethodBase" position="0" attrib="0" type="System.Reflection.MethodBase" />
                  <parameter name="parameters" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr[]" />
                </parameters>
              </method>
              <method name="GetNamespaces()" attrib="1222" abstract="true" virtual="true" returntype="Microsoft.FSharp.Core.CompilerServices.IProvidedNamespace[]">
                <parameters />
              </method>
              <method name="GetStaticParameters(System.Type)" attrib="1222" abstract="true" virtual="true" returntype="System.Reflection.ParameterInfo[]">
                <parameters>
                  <parameter name="typeWithoutArguments" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="add_Invalidate(System.EventHandler)" attrib="1222" abstract="true" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CLIEventAttribute" />
                </attributes>
                <parameters>
                  <parameter name="" position="0" attrib="0" type="System.EventHandler" />
                </parameters>
              </method>
              <method name="remove_Invalidate(System.EventHandler)" attrib="1222" abstract="true" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CLIEventAttribute" />
                </attributes>
                <parameters>
                  <parameter name="" position="0" attrib="0" type="System.EventHandler" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MeasureInverse`1" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="TMeasure" attributes="0" />
            </generic-parameters>
          </class>
          <class name="MeasureOne" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
          </class>
          <class name="MeasureProduct`2" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="TMeasure1" attributes="0" />
              <generic-parameter name="TMeasure2" attributes="0" />
            </generic-parameters>
          </class>
          <class name="RuntimeHelpers" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="CreateEvent(Microsoft.FSharp.Core.FSharpFunc`2[TDelegate,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpFunc`2[TDelegate,Microsoft.FSharp.Core.Unit], Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.FSharpFunc`2[System.Object,Microsoft.FSharp.Core.FSharpFunc`2[TArgs,Microsoft.FSharp.Core.Unit]],TDelegate])" attrib="22" static="true" returntype="Microsoft.FSharp.Control.IEvent`2[TDelegate,TArgs]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="addHandler" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TDelegate,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="removeHandler" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TDelegate,Microsoft.FSharp.Core.Unit]" />
                  <parameter name="createHandler" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.FSharpFunc`2[System.Object,Microsoft.FSharp.Core.FSharpFunc`2[TArgs,Microsoft.FSharp.Core.Unit]],TDelegate]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Delegate" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="TArgs" attributes="0" />
                </generic-parameters>
              </method>
              <method name="EnumerateFromFunctions(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,T], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean], Microsoft.FSharp.Core.FSharpFunc`2[T,TResult])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="create" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,T]" />
                  <parameter name="moveNext" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]" />
                  <parameter name="current" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="EnumerateThenFinally(System.Collections.Generic.IEnumerable`1[T], Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                  <parameter name="compensation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="EnumerateUsing(T, Microsoft.FSharp.Core.FSharpFunc`2[T,TCollection])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="resource" position="0" attrib="0" type="T" />
                  <parameter name="source" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TCollection]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.IDisposable" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="TCollection" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Collections.Generic.IEnumerable`1[TResult]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="EnumerateWhile(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,System.Boolean], System.Collections.Generic.IEnumerable`1[T])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="guard" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Core.Unit,System.Boolean]" />
                  <parameter name="source" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="TypeProviderAssemblyAttribute" type="class" base="System.Attribute" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Assembly" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="assemblyName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AssemblyName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_AssemblyName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TypeProviderAttribute" type="class" base="System.Attribute" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TypeProviderConfig" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor(Microsoft.FSharp.Core.FSharpFunc`2[System.String,System.Boolean])" attrib="6150">
                <parameters>
                  <parameter name="systemRuntimeContainsType" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.String,System.Boolean]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsHostedExecution" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsHostedExecution()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsHostedExecution(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsInvalidationSupported" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsInvalidationSupported()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IsInvalidationSupported(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ReferencedAssemblies" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_ReferencedAssemblies()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                  <method name="set_ReferencedAssemblies(System.String[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.String[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ResolutionFolder" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ResolutionFolder()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ResolutionFolder(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RuntimeAssembly" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_RuntimeAssembly()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_RuntimeAssembly(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SystemRuntimeAssemblyVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_SystemRuntimeAssemblyVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                  <method name="set_SystemRuntimeAssemblyVersion(System.Version)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Version" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TemporaryFolder" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TemporaryFolder()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TemporaryFolder(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="SystemRuntimeContainsType(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="typeName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TypeProviderDefinitionLocationAttribute" type="class" base="System.Attribute" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Column" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Column()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Column(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="FilePath" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FilePath()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_FilePath(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Line" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Line()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Line(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="v" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TypeProviderEditorHideMethodsAttribute" type="class" base="System.Attribute" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="Delegate, Interface, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TypeProviderTypeAttributes" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="IsErased" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilerServices.TypeProviderTypeAttributes" value="1073741824" />
              <field name="SuppressRelocate" attrib="32854" fieldtype="Microsoft.FSharp.Core.CompilerServices.TypeProviderTypeAttributes" value="-2147483648" />
            </fields>
          </class>
          <class name="TypeProviderXmlDocAttribute" type="class" base="System.Attribute" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="ValidOn" value="All" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6150">
                <parameters>
                  <parameter name="commentText" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CommentText" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_CommentText()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Data.UnitSystems.SI.UnitNames">
        <classes>
          <class name="ampere" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
          <class name="candela" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
          <class name="kelvin" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
          <class name="kilogram" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
          <class name="metre" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
          <class name="mole" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
          <class name="second" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.MeasureAttribute" />
            </attributes>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Linq">
        <classes>
          <class name="NullableModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="ToByte(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Byte]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="byte" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToChar(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Char]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="char" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToDecimal(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="decimal" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToDouble(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="float" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToEnum(System.Nullable`1[System.Int32])" attrib="22" static="true" returntype="System.Nullable`1[TResult]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="enum" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToInt(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToInt16(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Int16]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int16" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToInt32(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int32" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToInt64(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="int64" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToIntPtr(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.IntPtr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="nativeint" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToSByte(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.SByte]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="sbyte" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToSingle(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="float32" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToUInt16(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.UInt16]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint16" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToUInt32(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.UInt32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint32" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToUInt64(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.UInt64]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="uint64" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ToUIntPtr(System.Nullable`1[T])" attrib="22" static="true" returntype="System.Nullable`1[System.UIntPtr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="unativeint" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="NullableOperators" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="op_DivideQmark(T1, System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_EqualsQmark(T, System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_GreaterEqualsQmark(T, System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_GreaterQmark(T, System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_LessEqualsQmark(T, System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_LessGreaterQmark(T, System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_LessQmark(T, System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_MinusQmark(T1, System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_MultiplyQmark(T1, System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_PercentQmark(T1, System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_PlusQmark(T1, System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="T1" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="0" />
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkDivide(System.Nullable`1[T1], T2)" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkDivideQmark(System.Nullable`1[T1], System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkEquals(System.Nullable`1[T], T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkEqualsQmark(System.Nullable`1[T], System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkGreater(System.Nullable`1[T], T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkGreaterEquals(System.Nullable`1[T], T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkGreaterEqualsQmark(System.Nullable`1[T], System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkGreaterQmark(System.Nullable`1[T], System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkLess(System.Nullable`1[T], T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkLessEquals(System.Nullable`1[T], T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkLessEqualsQmark(System.Nullable`1[T], System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkLessGreater(System.Nullable`1[T], T)" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkLessGreaterQmark(System.Nullable`1[T], System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkLessQmark(System.Nullable`1[T], System.Nullable`1[T])" attrib="2070" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkMinus(System.Nullable`1[T1], T2)" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkMinusQmark(System.Nullable`1[T1], System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkMultiply(System.Nullable`1[T1], T2)" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkMultiplyQmark(System.Nullable`1[T1], System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkPercent(System.Nullable`1[T1], T2)" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkPercentQmark(System.Nullable`1[T1], System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkPlus(System.Nullable`1[T1], T2)" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="T2" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="0" />
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="op_QmarkPlusQmark(System.Nullable`1[T1], System.Nullable`1[T2])" attrib="2070" static="true" returntype="System.Nullable`1[T3]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Nullable`1[T1]" />
                  <parameter name="y" position="1" attrib="0" type="System.Nullable`1[T2]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T1" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T2" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                  <generic-parameter name="T3" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="QueryBuilder" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.ClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6150">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="All(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean])" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="all" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="predicate" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AverageBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TValue])" attrib="134" returntype="TValue">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="averageBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="projection" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TValue]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AverageByNullable(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]])" attrib="134" returntype="System.Nullable`1[TValue]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="averageByNullable" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="projection" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Contains(Microsoft.FSharp.Linq.QuerySource`2[T,Q], T)" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="contains" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="key" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="System.Int32">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="count" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="distinct" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ExactlyOne(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="exactlyOne" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ExactlyOneOrDefault(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="exactlyOneOrDefault" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Exists(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean])" attrib="134" returntype="System.Boolean">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="exists" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="predicate" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Find(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="find" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="predicate" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="For(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Linq.QuerySource`2[TResult,Q2]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[TResult,Q]">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="body" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,Microsoft.FSharp.Linq.QuerySource`2[TResult,Q2]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                  <generic-parameter name="Q2" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TKey])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[System.Linq.IGrouping`2[TKey,T],Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="groupBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(Microsoft.FSharp.Linq.QuerySource`2[TOuter,Q], Microsoft.FSharp.Linq.QuerySource`2[TInner,Q], Microsoft.FSharp.Core.FSharpFunc`2[TOuter,TKey], Microsoft.FSharp.Core.FSharpFunc`2[TInner,TKey], Microsoft.FSharp.Core.FSharpFunc`2[TOuter,Microsoft.FSharp.Core.FSharpFunc`2[System.Collections.Generic.IEnumerable`1[TInner],TResult]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[TResult,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="IsLikeGroupJoin" value="True" />
                      <property name="JoinConditionWord" value="on" />
                      <property name="Name" value="groupJoin" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="outerSource" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[TOuter,Q]" />
                  <parameter name="innerSource" position="1" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[TInner,Q]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TOuter,Microsoft.FSharp.Core.FSharpFunc`2[System.Collections.Generic.IEnumerable`1[TInner],TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupValBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TValue], Microsoft.FSharp.Core.FSharpFunc`2[T,TKey])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[System.Linq.IGrouping`2[TKey,TValue],Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="groupValBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="resultSelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TValue]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                  <parameter name="keySelector" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Head(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="head" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="HeadOrDefault(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="headOrDefault" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(Microsoft.FSharp.Linq.QuerySource`2[TOuter,Q], Microsoft.FSharp.Linq.QuerySource`2[TInner,Q], Microsoft.FSharp.Core.FSharpFunc`2[TOuter,TKey], Microsoft.FSharp.Core.FSharpFunc`2[TInner,TKey], Microsoft.FSharp.Core.FSharpFunc`2[TOuter,Microsoft.FSharp.Core.FSharpFunc`2[TInner,TResult]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[TResult,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="IsLikeJoin" value="True" />
                      <property name="JoinConditionWord" value="on" />
                      <property name="Name" value="join" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="outerSource" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[TOuter,Q]" />
                  <parameter name="innerSource" position="1" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[TInner,Q]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TOuter,Microsoft.FSharp.Core.FSharpFunc`2[TInner,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="last" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="lastOrDefault" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LeftOuterJoin(Microsoft.FSharp.Linq.QuerySource`2[TOuter,Q], Microsoft.FSharp.Linq.QuerySource`2[TInner,Q], Microsoft.FSharp.Core.FSharpFunc`2[TOuter,TKey], Microsoft.FSharp.Core.FSharpFunc`2[TInner,TKey], Microsoft.FSharp.Core.FSharpFunc`2[TOuter,Microsoft.FSharp.Core.FSharpFunc`2[System.Collections.Generic.IEnumerable`1[TInner],TResult]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[TResult,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="IsLikeGroupJoin" value="True" />
                      <property name="JoinConditionWord" value="on" />
                      <property name="Name" value="leftOuterJoin" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="outerSource" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[TOuter,Q]" />
                  <parameter name="innerSource" position="1" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[TInner,Q]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[TOuter,Microsoft.FSharp.Core.FSharpFunc`2[System.Collections.Generic.IEnumerable`1[TInner],TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MaxBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TValue])" attrib="134" returntype="TValue">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="maxBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="valueSelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TValue]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MaxByNullable(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]])" attrib="134" returntype="System.Nullable`1[TValue]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="maxByNullable" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="valueSelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="MinBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TValue])" attrib="134" returntype="TValue">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="minBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="valueSelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TValue]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MinByNullable(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]])" attrib="134" returntype="System.Nullable`1[TValue]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="minByNullable" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="valueSelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Nth(Microsoft.FSharp.Linq.QuerySource`2[T,Q], System.Int32)" attrib="134" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="nth" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Quote(Microsoft.FSharp.Quotations.FSharpExpr`1[T])" attrib="134" returntype="Microsoft.FSharp.Quotations.FSharpExpr`1[T]">
                <parameters>
                  <parameter name="q" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Run(Microsoft.FSharp.Quotations.FSharpExpr`1[Microsoft.FSharp.Linq.QuerySource`2[T,System.Linq.IQueryable]])" attrib="134" returntype="System.Linq.IQueryable`1[T]">
                <parameters>
                  <parameter name="q" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr`1[Microsoft.FSharp.Linq.QuerySource`2[T,System.Linq.IQueryable]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TResult])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[TResult,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="select" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="projection" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Skip(Microsoft.FSharp.Linq.QuerySource`2[T,Q], System.Int32)" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="skip" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="skipWhile" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="predicate" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TKey])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="sortBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortByDescending(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TKey])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="sortByDescending" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SortByNullable(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="sortByNullable" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="SortByNullableDescending(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="sortByNullableDescending" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Source(System.Collections.Generic.IEnumerable`1[T])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,System.Collections.IEnumerable]">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Source(System.Linq.IQueryable`1[T])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SumBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TValue])" attrib="134" returntype="TValue">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="sumBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="projection" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TValue]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SumByNullable(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]])" attrib="134" returntype="System.Nullable`1[TValue]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="Name" value="sumByNullable" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="valueSelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TValue]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TValue" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Take(Microsoft.FSharp.Linq.QuerySource`2[T,Q], System.Int32)" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="take" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="takeWhile" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="predicate" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TKey])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="thenBy" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,TKey])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="thenByDescending" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,TKey]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByNullable(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="thenByNullable" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="ThenByNullableDescending(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="thenByNullableDescending" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="keySelector" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Nullable`1[TKey]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                  <generic-parameter name="TKey" attributes="24">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.ValueType" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Where(Microsoft.FSharp.Linq.QuerySource`2[T,Q], Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CustomOperationAttribute">
                    <properties>
                      <property name="MaintainsVariableSpace" value="True" />
                      <property name="AllowIntoPattern" value="True" />
                      <property name="Name" value="where" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                  <parameter name="predicate" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[T,System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.ProjectionParameterAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Yield(T)" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="YieldFrom(Microsoft.FSharp.Linq.QuerySource`2[T,Q])" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <parameters>
                  <parameter name="computation" position="0" attrib="0" type="Microsoft.FSharp.Linq.QuerySource`2[T,Q]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zero()" attrib="134" returntype="Microsoft.FSharp.Linq.QuerySource`2[T,Q]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                  <generic-parameter name="Q" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="QuerySource`2" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.NoComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.NoEqualityAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
              <generic-parameter name="Q" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6150">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Source" attrib="0" ptype="System.Collections.Generic.IEnumerable`1[T]">
                <methods>
                  <method name="get_Source()" attrib="2182" returntype="System.Collections.Generic.IEnumerable`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Linq.QueryRunExtensions">
        <classes>
          <class name="HighPriority" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="RunQueryAsEnumerable(Microsoft.FSharp.Linq.QueryBuilder, Microsoft.FSharp.Quotations.FSharpExpr`1[Microsoft.FSharp.Linq.QuerySource`2[T,System.Collections.IEnumerable]])" attrib="22" static="true" returntype="System.Collections.Generic.IEnumerable`1[T]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="Run" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="this" position="0" attrib="0" type="Microsoft.FSharp.Linq.QueryBuilder" />
                  <parameter name="q" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr`1[Microsoft.FSharp.Linq.QuerySource`2[T,System.Collections.IEnumerable]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="LowPriority" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="RunQueryAsValue(Microsoft.FSharp.Linq.QueryBuilder, Microsoft.FSharp.Quotations.FSharpExpr`1[T])" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="Run" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="this" position="0" attrib="0" type="Microsoft.FSharp.Linq.QueryBuilder" />
                  <parameter name="q" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Linq.RuntimeHelpers">
        <classes>
          <class name="AnonymousObject`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`2" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`3" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2, T3)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                  <parameter name="Item3" position="2" attrib="0" type="T3" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item3" attrib="0" ptype="T3">
                <methods>
                  <method name="get_Item3()" attrib="2182" returntype="T3">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`4" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2, T3, T4)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                  <parameter name="Item3" position="2" attrib="0" type="T3" />
                  <parameter name="Item4" position="3" attrib="0" type="T4" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item3" attrib="0" ptype="T3">
                <methods>
                  <method name="get_Item3()" attrib="2182" returntype="T3">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item4" attrib="0" ptype="T4">
                <methods>
                  <method name="get_Item4()" attrib="2182" returntype="T4">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`5" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2, T3, T4, T5)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                  <parameter name="Item3" position="2" attrib="0" type="T3" />
                  <parameter name="Item4" position="3" attrib="0" type="T4" />
                  <parameter name="Item5" position="4" attrib="0" type="T5" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item3" attrib="0" ptype="T3">
                <methods>
                  <method name="get_Item3()" attrib="2182" returntype="T3">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item4" attrib="0" ptype="T4">
                <methods>
                  <method name="get_Item4()" attrib="2182" returntype="T4">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item5" attrib="0" ptype="T5">
                <methods>
                  <method name="get_Item5()" attrib="2182" returntype="T5">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`6" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
              <generic-parameter name="T6" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2, T3, T4, T5, T6)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                  <parameter name="Item3" position="2" attrib="0" type="T3" />
                  <parameter name="Item4" position="3" attrib="0" type="T4" />
                  <parameter name="Item5" position="4" attrib="0" type="T5" />
                  <parameter name="Item6" position="5" attrib="0" type="T6" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item3" attrib="0" ptype="T3">
                <methods>
                  <method name="get_Item3()" attrib="2182" returntype="T3">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item4" attrib="0" ptype="T4">
                <methods>
                  <method name="get_Item4()" attrib="2182" returntype="T4">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item5" attrib="0" ptype="T5">
                <methods>
                  <method name="get_Item5()" attrib="2182" returntype="T5">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item6" attrib="0" ptype="T6">
                <methods>
                  <method name="get_Item6()" attrib="2182" returntype="T6">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`7" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
              <generic-parameter name="T6" attributes="0" />
              <generic-parameter name="T7" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2, T3, T4, T5, T6, T7)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                  <parameter name="Item3" position="2" attrib="0" type="T3" />
                  <parameter name="Item4" position="3" attrib="0" type="T4" />
                  <parameter name="Item5" position="4" attrib="0" type="T5" />
                  <parameter name="Item6" position="5" attrib="0" type="T6" />
                  <parameter name="Item7" position="6" attrib="0" type="T7" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item3" attrib="0" ptype="T3">
                <methods>
                  <method name="get_Item3()" attrib="2182" returntype="T3">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item4" attrib="0" ptype="T4">
                <methods>
                  <method name="get_Item4()" attrib="2182" returntype="T4">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item5" attrib="0" ptype="T5">
                <methods>
                  <method name="get_Item5()" attrib="2182" returntype="T5">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item6" attrib="0" ptype="T6">
                <methods>
                  <method name="get_Item6()" attrib="2182" returntype="T6">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item7" attrib="0" ptype="T7">
                <methods>
                  <method name="get_Item7()" attrib="2182" returntype="T7">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="AnonymousObject`8" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T1" attributes="0" />
              <generic-parameter name="T2" attributes="0" />
              <generic-parameter name="T3" attributes="0" />
              <generic-parameter name="T4" attributes="0" />
              <generic-parameter name="T5" attributes="0" />
              <generic-parameter name="T6" attributes="0" />
              <generic-parameter name="T7" attributes="0" />
              <generic-parameter name="T8" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T1, T2, T3, T4, T5, T6, T7, T8)" attrib="6150">
                <parameters>
                  <parameter name="Item1" position="0" attrib="0" type="T1" />
                  <parameter name="Item2" position="1" attrib="0" type="T2" />
                  <parameter name="Item3" position="2" attrib="0" type="T3" />
                  <parameter name="Item4" position="3" attrib="0" type="T4" />
                  <parameter name="Item5" position="4" attrib="0" type="T5" />
                  <parameter name="Item6" position="5" attrib="0" type="T6" />
                  <parameter name="Item7" position="6" attrib="0" type="T7" />
                  <parameter name="Item8" position="7" attrib="0" type="T8" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Item1" attrib="0" ptype="T1">
                <methods>
                  <method name="get_Item1()" attrib="2182" returntype="T1">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item2" attrib="0" ptype="T2">
                <methods>
                  <method name="get_Item2()" attrib="2182" returntype="T2">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item3" attrib="0" ptype="T3">
                <methods>
                  <method name="get_Item3()" attrib="2182" returntype="T3">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item4" attrib="0" ptype="T4">
                <methods>
                  <method name="get_Item4()" attrib="2182" returntype="T4">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item5" attrib="0" ptype="T5">
                <methods>
                  <method name="get_Item5()" attrib="2182" returntype="T5">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item6" attrib="0" ptype="T6">
                <methods>
                  <method name="get_Item6()" attrib="2182" returntype="T6">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item7" attrib="0" ptype="T7">
                <methods>
                  <method name="get_Item7()" attrib="2182" returntype="T7">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item8" attrib="0" ptype="T8">
                <methods>
                  <method name="get_Item8()" attrib="2182" returntype="T8">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="Grouping`2" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Linq.IGrouping`2[K,T]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="K" attributes="0" />
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(K, System.Collections.Generic.IEnumerable`1[T])" attrib="6150">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="K" />
                  <parameter name="values" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="LeafExpressionConverter" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="EvaluateQuotation(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="ImplicitExpressionConversionHelper(T)" attrib="22" static="true" returntype="System.Linq.Expressions.Expression`1[T]">
                <parameters>
                  <parameter name="_x" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="MemberInitializationHelper(T)" attrib="22" static="true" returntype="T">
                <parameters>
                  <parameter name="_x" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="NewAnonymousObjectHelper(T)" attrib="22" static="true" returntype="T">
                <parameters>
                  <parameter name="_x" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="QuotationToExpression(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="QuotationToLambdaExpression(Microsoft.FSharp.Quotations.FSharpExpr`1[T])" attrib="22" static="true" returntype="System.Linq.Expressions.Expression`1[T]">
                <parameters>
                  <parameter name="e" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SubstHelper(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpVar[], System.Object[])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr`1[T]">
                <parameters>
                  <parameter name="q" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="x" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar[]" />
                  <parameter name="y" position="2" attrib="0" type="System.Object[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.NativeInterop">
        <classes>
          <class name="NativePtrModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" />
            </attributes>
            <methods>
              <method name="AddPointerInlined(System.IntPtr, System.Int32)" attrib="22" static="true" returntype="System.IntPtr">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="add" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GetPointerInlined(System.IntPtr, System.Int32)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="get" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfNativeIntInlined(System.IntPtr)" attrib="22" static="true" returntype="System.IntPtr">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="ofNativeInt" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ReadPointerInlined(System.IntPtr)" attrib="22" static="true" returntype="T">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="read" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SetPointerInlined(System.IntPtr, System.Int32, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="set" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="value" position="2" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="StackAllocate(System.Int32)" attrib="22" static="true" returntype="System.IntPtr">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="stackalloc" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToNativeIntInlined(System.IntPtr)" attrib="22" static="true" returntype="System.IntPtr">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="toNativeInt" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WritePointerInlined(System.IntPtr, T)" attrib="22" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
                    <properties>
                      <property name="Counts" value="Mono.Cecil.CustomAttributeArgument[]" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="write" />
                    </properties>
                  </attribute>
                  <attribute name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" />
                  <attribute name="Microsoft.FSharp.Core.UnverifiableAttribute" />
                </attributes>
                <parameters>
                  <parameter name="address" position="0" attrib="0" type="System.IntPtr" />
                  <parameter name="value" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Quotations">
        <classes>
          <class name="DerivedPatternsModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="AndAlsoPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|AndAlso|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="ApplicationsPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Applications|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="BoolPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Bool|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="BytePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Byte]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Byte|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="CharPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Char]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Char|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="DoublePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Double]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Double|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Int16Pattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Int16]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Int16|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Int32Pattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Int32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Int32|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Int64Pattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Int64]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Int64|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="LambdasPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpVar]],Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Lambdas|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="MethodWithReflectedDefinitionPattern(System.Reflection.MethodBase)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|MethodWithReflectedDefinition|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="methodBase" position="0" attrib="0" type="System.Reflection.MethodBase" />
                </parameters>
              </method>
              <method name="OrElsePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|OrElse|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="PropertyGetterWithReflectedDefinitionPattern(System.Reflection.PropertyInfo)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|PropertyGetterWithReflectedDefinition|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="propertyInfo" position="0" attrib="0" type="System.Reflection.PropertyInfo" />
                </parameters>
              </method>
              <method name="PropertySetterWithReflectedDefinitionPattern(System.Reflection.PropertyInfo)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|PropertySetterWithReflectedDefinition|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="propertyInfo" position="0" attrib="0" type="System.Reflection.PropertyInfo" />
                </parameters>
              </method>
              <method name="SBytePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.SByte]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|SByte|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="SinglePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Single]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Single|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="SpecificCallPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr],Microsoft.FSharp.Collections.FSharpList`1[System.Type],Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|SpecificCall|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="templateParameter" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="StringPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.String]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|String|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="UInt16Pattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.UInt16]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|UInt16|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="UInt32Pattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.UInt32]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|UInt32|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="UInt64Pattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.UInt64]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|UInt64|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="UnitPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Core.Unit]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Unit|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExprShapeModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="RebuildShapeCombination(System.Object, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="shape" position="0" attrib="0" type="System.Object" />
                  <parameter name="arguments" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="ShapePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpChoice`3[Microsoft.FSharp.Quotations.FSharpVar,System.Tuple`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr],System.Tuple`2[System.Object,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|ShapeVar|ShapeLambda|ShapeCombination|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpExpr" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.ClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpExpr" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="CustomAttributes" attrib="0" ptype="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <methods>
                  <method name="get_CustomAttributes()" attrib="2182" returntype="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddressOf(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="AddressSet(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="value" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Application(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="functionExpr" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="argument" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Applications(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="functionExpr" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="arguments" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]" />
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="methodInfo" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="Call(Microsoft.FSharp.Quotations.FSharpExpr, System.Reflection.MethodInfo, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="methodInfo" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="Cast(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr`1[T]">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Coerce(Microsoft.FSharp.Quotations.FSharpExpr, System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="target" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="DefaultValue(System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="expressionType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Deserialize(System.Type, Microsoft.FSharp.Collections.FSharpList`1[System.Type], Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr], System.Byte[])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="qualifyingType" position="0" attrib="0" type="System.Type" />
                  <parameter name="spliceTypes" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[System.Type]" />
                  <parameter name="spliceExprs" position="2" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                  <parameter name="bytes" position="3" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="FieldGet(System.Reflection.FieldInfo)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="fieldInfo" position="0" attrib="0" type="System.Reflection.FieldInfo" />
                </parameters>
              </method>
              <method name="FieldGet(Microsoft.FSharp.Quotations.FSharpExpr, System.Reflection.FieldInfo)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="fieldInfo" position="1" attrib="0" type="System.Reflection.FieldInfo" />
                </parameters>
              </method>
              <method name="FieldSet(System.Reflection.FieldInfo, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="fieldInfo" position="0" attrib="0" type="System.Reflection.FieldInfo" />
                  <parameter name="value" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="FieldSet(Microsoft.FSharp.Quotations.FSharpExpr, System.Reflection.FieldInfo, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="fieldInfo" position="1" attrib="0" type="System.Reflection.FieldInfo" />
                  <parameter name="value" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="ForIntegerRangeLoop(Microsoft.FSharp.Quotations.FSharpVar, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="loopVariable" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                  <parameter name="start" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="endExpr" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="body" position="3" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="GetFreeVars()" attrib="134" returntype="System.Collections.Generic.IEnumerable`1[Microsoft.FSharp.Quotations.FSharpVar]">
                <parameters />
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GlobalVar(System.String)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr`1[T]">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="IfThenElse(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="guard" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="thenExpr" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="elseExpr" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Lambda(Microsoft.FSharp.Quotations.FSharpVar, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                  <parameter name="body" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Let(Microsoft.FSharp.Quotations.FSharpVar, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="letVariable" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                  <parameter name="letExpr" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="body" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="LetRecursive(Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr]], Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="bindings" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr]]" />
                  <parameter name="body" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewArray(System.Type, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="elementType" position="0" attrib="0" type="System.Type" />
                  <parameter name="elements" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="NewDelegate(System.Type, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpVar], Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="parameters" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpVar]" />
                  <parameter name="body" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewObject(System.Reflection.ConstructorInfo, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="constructorInfo" position="0" attrib="0" type="System.Reflection.ConstructorInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="NewRecord(System.Type, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="elements" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="NewTuple(Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="elements" position="0" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="NewUnionCase(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]" />
                </parameters>
              </method>
              <method name="PropertyGet(System.Reflection.PropertyInfo, Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="indexerArgs" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PropertyGet(Microsoft.FSharp.Quotations.FSharpExpr, System.Reflection.PropertyInfo, Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="property" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="indexerArgs" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PropertySet(System.Reflection.PropertyInfo, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="property" position="0" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="value" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="indexerArgs" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PropertySet(Microsoft.FSharp.Quotations.FSharpExpr, System.Reflection.PropertyInfo, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]])" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="property" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="value" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="indexerArgs" position="3" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Quote(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="inner" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="RegisterReflectedDefinitions(System.Reflection.Assembly, System.String, System.Byte[])" attrib="22" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="resource" position="1" attrib="0" type="System.String" />
                  <parameter name="serializedValue" position="2" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="Sequential(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="second" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="Substitute(Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]])" attrib="134" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="substitution" position="0" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]]" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="ToString(System.Boolean)" attrib="134" returntype="System.String">
                <parameters>
                  <parameter name="full" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="TryFinally(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="compensation" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="TryGetReflectedDefinition(System.Reflection.MethodBase)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <parameters>
                  <parameter name="methodBase" position="0" attrib="0" type="System.Reflection.MethodBase" />
                </parameters>
              </method>
              <method name="TryWith(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpVar, Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpVar, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="filterVar" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                  <parameter name="filterBody" position="2" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="catchVar" position="3" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                  <parameter name="catchBody" position="4" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="TupleGet(Microsoft.FSharp.Quotations.FSharpExpr, System.Int32)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="tuple" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TypeTest(Microsoft.FSharp.Quotations.FSharpExpr, System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="target" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="UnionCaseTest(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Reflection.UnionCaseInfo)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="unionCase" position="1" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                </parameters>
              </method>
              <method name="Value(T)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Value(System.Object, System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="expressionType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Var(Microsoft.FSharp.Quotations.FSharpVar)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="variable" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                </parameters>
              </method>
              <method name="VarSet(Microsoft.FSharp.Quotations.FSharpVar, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="variable" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpVar" />
                  <parameter name="value" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="WhileLoop(Microsoft.FSharp.Quotations.FSharpExpr, Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                <parameters>
                  <parameter name="guard" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                  <parameter name="body" position="1" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpExpr`1" type="class" base="Microsoft.FSharp.Quotations.FSharpExpr" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.ClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpExpr`1" />
                </properties>
              </attribute>
            </attributes>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="Raw" attrib="0" ptype="Microsoft.FSharp.Quotations.FSharpExpr">
                <methods>
                  <method name="get_Raw()" attrib="2182" returntype="Microsoft.FSharp.Quotations.FSharpExpr">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="FSharpVar" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompiledNameAttribute">
                <properties>
                  <property name="CompiledName" value="FSharpVar" />
                </properties>
              </attribute>
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String, System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="6150">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="typ" position="1" attrib="0" type="System.Type" />
                  <parameter name="isMutable" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsMutable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsMutable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="Global(System.String, System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Quotations.FSharpVar">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="typ" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="PatternsModule" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationRepresentationAttribute">
                <properties>
                  <property name="Flags" value="ModuleSuffix" />
                </properties>
              </attribute>
            </attributes>
            <methods>
              <method name="AddressOfPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|AddressOf|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="AddressSetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|AddressSet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="ApplicationPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Application|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="CallPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr],System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Call|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="CoercePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,System.Type]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Coerce|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="DefaultValuePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Type]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|DefaultValue|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="FieldGetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr],System.Reflection.FieldInfo]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|FieldGet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="FieldSetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr],System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|FieldSet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="ForIntegerRangeLoopPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`4[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|ForIntegerRangeLoop|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="IfThenElsePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|IfThenElse|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="LambdaPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Lambda|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="LetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Let|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="LetRecursivePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Collections.FSharpList`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr]],Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|LetRecursive|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewArrayPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[System.Type,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|NewArray|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewDelegatePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[System.Type,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpVar],Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|NewDelegate|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewObjectPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|NewObject|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewRecordPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[System.Type,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|NewRecord|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewTuplePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|NewTuple|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="NewUnionCasePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|NewUnionCase|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="PropertyGetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`3[Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr],System.Reflection.PropertyInfo,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr]]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|PropertyGet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="PropertySetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`4[Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr],System.Reflection.PropertyInfo,Microsoft.FSharp.Collections.FSharpList`1[Microsoft.FSharp.Quotations.FSharpExpr],Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|PropertySet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="QuotePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpExpr]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Quote|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="SequentialPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Sequential|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="TryFinallyPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|TryFinally|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="TryWithPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`5[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|TryWith|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="TupleGetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,System.Int32]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|TupleGet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="TypeTestPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,System.Type]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|TypeTest|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="UnionCaseTestPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Reflection.UnionCaseInfo]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|UnionCaseTest|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="ValuePattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[System.Object,System.Type]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Value|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="VarPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[Microsoft.FSharp.Quotations.FSharpVar]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|Var|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="VarSetPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|VarSet|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
              <method name="WhileLoopPattern(Microsoft.FSharp.Quotations.FSharpExpr)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr]]">
                <attributes>
                  <attribute name="Microsoft.FSharp.Core.CompilationSourceNameAttribute">
                    <properties>
                      <property name="SourceName" value="|WhileLoop|_|" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="input" position="0" attrib="0" type="Microsoft.FSharp.Quotations.FSharpExpr" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="Microsoft.FSharp.Reflection">
        <classes>
          <class name="FSharpReflectionExtensions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AutoOpenAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="FSharpType.GetExceptionFields.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Reflection.PropertyInfo[]">
                <parameters>
                  <parameter name="exceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpType.GetRecordFields.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Reflection.PropertyInfo[]">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpType.GetUnionCases.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="Microsoft.FSharp.Reflection.UnionCaseInfo[]">
                <parameters>
                  <parameter name="unionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpType.IsExceptionRepresentation.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="exceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpType.IsRecord.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpType.IsUnion.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.GetExceptionFields.Static(System.Object, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Object[]">
                <parameters>
                  <parameter name="exn" position="0" attrib="0" type="System.Object" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.GetRecordFields.Static(System.Object, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Object[]">
                <parameters>
                  <parameter name="record" position="0" attrib="0" type="System.Object" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.GetUnionFields.Static(System.Object, System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="unionType" position="1" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.MakeRecord.Static(System.Type, System.Object[], Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="values" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="allowAccessToPrivateRepresentation" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.MakeUnion.Static(Microsoft.FSharp.Reflection.UnionCaseInfo, System.Object[], Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="allowAccessToPrivateRepresentation" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeRecordConstructor.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object[],System.Object]">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeRecordConstructorInfo.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Reflection.ConstructorInfo">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeRecordReader.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object[]]">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeUnionConstructor.Static(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object[],System.Object]">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeUnionConstructorInfo.Static(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Reflection.MethodInfo">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeUnionReader.Static(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object[]]">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeUnionTagMemberInfo.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="System.Reflection.MemberInfo">
                <parameters>
                  <parameter name="unionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FSharpValue.PreComputeUnionTagReader.Static(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Boolean])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Int32]">
                <parameters>
                  <parameter name="unionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="allowAccessToPrivateRepresentation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Boolean]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpType" type="class" base="System.Object" sealed="true" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <methods>
              <method name="GetExceptionFields(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Reflection.PropertyInfo[]">
                <parameters>
                  <parameter name="exceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetFunctionElements(System.Type)" attrib="22" static="true" returntype="System.Tuple`2[System.Type,System.Type]">
                <parameters>
                  <parameter name="functionType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetRecordFields(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Reflection.PropertyInfo[]">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetTupleElements(System.Type)" attrib="22" static="true" returntype="System.Type[]">
                <parameters>
                  <parameter name="tupleType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetUnionCases(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="Microsoft.FSharp.Reflection.UnionCaseInfo[]">
                <parameters>
                  <parameter name="unionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsExceptionRepresentation(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="exceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsFunction(System.Type)" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsModule(System.Type)" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsRecord(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsTuple(System.Type)" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsUnion(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typ" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MakeFunctionType(System.Type, System.Type)" attrib="22" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="domain" position="0" attrib="0" type="System.Type" />
                  <parameter name="range" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="MakeTupleType(System.Type[])" attrib="22" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="types" position="0" attrib="0" type="System.Type[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FSharpValue" type="class" base="System.Object" sealed="true" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.AbstractClassAttribute" />
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <methods>
              <method name="GetExceptionFields(System.Object, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Object[]">
                <parameters>
                  <parameter name="exn" position="0" attrib="0" type="System.Object" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetRecordField(System.Object, System.Reflection.PropertyInfo)" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="record" position="0" attrib="0" type="System.Object" />
                  <parameter name="info" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                </parameters>
              </method>
              <method name="GetRecordFields(System.Object, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Object[]">
                <parameters>
                  <parameter name="record" position="0" attrib="0" type="System.Object" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetTupleField(System.Object, System.Int32)" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="tuple" position="0" attrib="0" type="System.Object" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetTupleFields(System.Object)" attrib="22" static="true" returntype="System.Object[]">
                <parameters>
                  <parameter name="tuple" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetUnionFields(System.Object, System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Tuple`2[Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]]">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="unionType" position="1" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MakeFunction(System.Type, Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object])" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="functionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="implementation" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object]" />
                </parameters>
              </method>
              <method name="MakeRecord(System.Type, System.Object[], Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="values" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="bindingFlags" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MakeTuple(System.Object[], System.Type)" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="tupleElements" position="0" attrib="0" type="System.Object[]" />
                  <parameter name="tupleType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo, System.Object[], Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="bindingFlags" position="2" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeRecordConstructor(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object[],System.Object]">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeRecordConstructorInfo(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Reflection.ConstructorInfo">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeRecordFieldReader(System.Reflection.PropertyInfo)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object]">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Reflection.PropertyInfo" />
                </parameters>
              </method>
              <method name="PreComputeRecordReader(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object[]]">
                <parameters>
                  <parameter name="recordType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeTupleConstructor(System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object[],System.Object]">
                <parameters>
                  <parameter name="tupleType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="PreComputeTupleConstructorInfo(System.Type)" attrib="22" static="true" returntype="System.Tuple`2[System.Reflection.ConstructorInfo,Microsoft.FSharp.Core.FSharpOption`1[System.Type]]">
                <parameters>
                  <parameter name="tupleType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="PreComputeTuplePropertyInfo(System.Type, System.Int32)" attrib="22" static="true" returntype="System.Tuple`2[System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption`1[System.Tuple`2[System.Type,System.Int32]]]">
                <parameters>
                  <parameter name="tupleType" position="0" attrib="0" type="System.Type" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="PreComputeTupleReader(System.Type)" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object[]]">
                <parameters>
                  <parameter name="tupleType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object[],System.Object]">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Reflection.MethodInfo">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Object[]]">
                <parameters>
                  <parameter name="unionCase" position="0" attrib="0" type="Microsoft.FSharp.Reflection.UnionCaseInfo" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeUnionTagMemberInfo(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="System.Reflection.MemberInfo">
                <parameters>
                  <parameter name="unionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="PreComputeUnionTagReader(System.Type, Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags])" attrib="22" static="true" returntype="Microsoft.FSharp.Core.FSharpFunc`2[System.Object,System.Int32]">
                <parameters>
                  <parameter name="unionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="bindingFlags" position="1" attrib="0" type="Microsoft.FSharp.Core.FSharpOption`1[System.Reflection.BindingFlags]">
                    <attributes>
                      <attribute name="Microsoft.FSharp.Core.OptionalArgumentAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UnionCaseInfo" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.SealedAttribute" />
            </attributes>
            <properties>
              <property name="DeclaringType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_DeclaringType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tag" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Tag()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetCustomAttributes()" attrib="134" returntype="System.Object[]">
                <parameters />
              </method>
              <method name="GetCustomAttributes(System.Type)" attrib="134" returntype="System.Object[]">
                <parameters>
                  <parameter name="attributeType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetCustomAttributesData()" attrib="134" returntype="System.Collections.Generic.IList`1[System.Reflection.CustomAttributeData]">
                <parameters />
              </method>
              <method name="GetFields()" attrib="134" returntype="System.Reflection.PropertyInfo[]">
                <parameters />
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections">
        <classes>
          <class name="IStructuralComparable" type="interface" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="CompareTo(System.Object, System.Collections.IComparer)" attrib="1222" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IStructuralEquatable" type="interface" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
            </attributes>
            <methods>
              <method name="Equals(System.Object, System.Collections.IEqualityComparer)" attrib="1222" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="GetHashCode(System.Collections.IEqualityComparer)" attrib="1222" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Numerics">
        <classes>
          <class name="BigInteger" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
            <attributes>
              <attribute name="Microsoft.FSharp.Core.CompilationMappingAttribute" />
              <attribute name="Microsoft.FSharp.Core.CustomComparisonAttribute" />
              <attribute name="Microsoft.FSharp.Core.CustomEqualityAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructAttribute" />
              <attribute name="Microsoft.FSharp.Core.StructuredFormatDisplayAttribute">
                <properties>
                  <property name="Value" value="{StructuredDisplayString}I" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6150">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int64)" attrib="6150">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IsOne" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsOne()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsZero" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsZero()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="One" attrib="0" ptype="System.Numerics.BigInteger">
                <methods>
                  <method name="get_One()" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Sign" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Sign()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Zero" attrib="0" ptype="System.Numerics.BigInteger">
                <methods>
                  <method name="get_Zero()" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Abs(System.Numerics.BigInteger)" attrib="22" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, out System.Numerics.BigInteger&amp;)" attrib="22" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="rem" position="2" attrib="2" type="System.Numerics.BigInteger" direction="out" />
                </parameters>
              </method>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="22" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="Parse(System.String)" attrib="22" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Pow(System.Numerics.BigInteger, System.Int32)" attrib="22" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="op_Addition(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Division(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Equality(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Explicit(System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Double">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Explicit(System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Explicit(System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Int64">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_GreaterThan(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_GreaterThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Inequality(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_LessThan(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_LessThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Modulus(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_Subtraction(System.Numerics.BigInteger, System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                  <parameter name="y" position="1" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_UnaryNegation(System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
              <method name="op_UnaryPlus(System.Numerics.BigInteger)" attrib="2070" static="true" returntype="System.Numerics.BigInteger">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Numerics.BigInteger" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
    </namespaces>
  </assembly>
</assemblies>